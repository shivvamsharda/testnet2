import { PlayerProps as CorePlayerProps } from '@livepeer/core-react/components';
import { ObjectFit } from '@livepeer/core-web/media';
import { ControlsOptions } from '@livepeer/core-web/media/browser';
import { HlsVideoConfig } from '@livepeer/core-web/media/browser/hls';
import { WebRTCVideoConfig } from '@livepeer/core-web/media/browser/webrtc';
import * as React from 'react';
export type PosterSource = string | React.ReactNode;
type PlayerProps<TPlaybackPolicyObject extends object, TSlice> = CorePlayerProps<HTMLMediaElement, PosterSource, TPlaybackPolicyObject, TSlice> & {
    /** Whether to show the picture in picture button (web only) */
    showPipButton?: boolean;
    /** Configuration for the event listeners */
    controls?: ControlsOptions;
    /** Configuration for the HLS.js instance used for HLS playback */
    hlsConfig?: HlsVideoConfig;
    /**
     * Whether low latency is enabled for live-streaming.
     * `force` can be passed to force the use of WebRTC low latency playback,
     * and disable fallback to HLS if WebRTC cannot be used.
     *
     * Defaults to `true`.
     */
    lowLatency?: boolean | 'force';
    /** Configuration for the WebRTC playback */
    webrtcConfig?: WebRTCVideoConfig;
    /**
     * Whether to include credentials in cross-origin requests made from the Player.
     * This is typically used to have the Player include cookies for requests made to Livepeer
     * domains, for access control policies.
     */
    allowCrossOriginCredentials?: boolean;
    /**
     * The tab index of the container element.
     */
    tabIndex?: number;
};
export type { ObjectFit, PlayerProps };
export declare const PlayerInternal: <TPlaybackPolicyObject extends object, TSlice>(props: PlayerProps<TPlaybackPolicyObject, TSlice>) => import("react/jsx-runtime").JSX.Element;
export declare const Player: <TPlaybackPolicyObject extends object, TSlice>(props: PlayerProps<TPlaybackPolicyObject, TSlice>) => import("react/jsx-runtime").JSX.Element;
