import { _ as _objectSpread2 } from './objectSpread2-811c5212.esm.js';
import { useVolume, useBaseSlider, useControlsContainer, useFullscreenButton, useTimeDisplay, useBroadcast, useClipButton, usePlayButton, useProgress, usePlayer } from '@livepeer/core-react/components';
import * as React from 'react';
import { useMemo, useCallback } from 'react';
import 'core-js/modules/es.object.to-string.js';
import 'core-js/modules/es.regexp.to-string.js';
import { sanitizeMediaControllerState, omit, ACCESS_CONTROL_ERROR_MESSAGE, STREAM_OFFLINE_ERROR_MESSAGE, BFRAMES_ERROR_MESSAGE } from '@livepeer/core-web';
import { styling } from '@livepeer/core-web/media/browser/styling';
import { createNewWHIP, changeMediaStream, getMediaDevices, getUserMedia, getDisplayMedia, createNewWHEP, isWebRTCSupported } from '@livepeer/core-web/media/browser/webrtc';
import { jsx, jsxs, Fragment } from 'react/jsx-runtime';
import { b as MediaControllerContext, u as useMediaController, a as useTheme, M as MediaControllerProvider } from './useTheme-6833860c.esm.js';
import { useConditionalIcon } from '@livepeer/core-react/hooks';
import * as Dialog from '@radix-ui/react-dialog';
import 'core-js/modules/es.array.filter.js';
import 'core-js/modules/es.array.concat.js';
import 'core-js/modules/es.array.slice.js';
import 'core-js/modules/es.array.map.js';
import * as Select from '@radix-ui/react-select';
import 'core-js/modules/es.array.iterator.js';
import 'core-js/modules/es.string.iterator.js';
import 'core-js/modules/web.dom-collections.iterator.js';
import 'core-js/modules/web.url.js';
import 'core-js/modules/web.url-search-params.js';
import { sanitizeMediaControllerState as sanitizeMediaControllerState$1, addMediaMetricsToStore } from '@livepeer/core-react';
import { isPictureInPictureSupported, canPlayMediaNatively } from '@livepeer/core-web/media/browser';
import { createNewHls, isHlsSupported } from '@livepeer/core-web/media/browser/hls';
import 'core-js/modules/es.regexp.exec.js';
import 'core-js/modules/es.string.match.js';
import 'core-js/modules/es.promise.js';

function _regeneratorRuntime() {
  _regeneratorRuntime = function () {
    return exports;
  };
  var exports = {},
    Op = Object.prototype,
    hasOwn = Op.hasOwnProperty,
    defineProperty = Object.defineProperty || function (obj, key, desc) {
      obj[key] = desc.value;
    },
    $Symbol = "function" == typeof Symbol ? Symbol : {},
    iteratorSymbol = $Symbol.iterator || "@@iterator",
    asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator",
    toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";
  function define(obj, key, value) {
    return Object.defineProperty(obj, key, {
      value: value,
      enumerable: !0,
      configurable: !0,
      writable: !0
    }), obj[key];
  }
  try {
    define({}, "");
  } catch (err) {
    define = function (obj, key, value) {
      return obj[key] = value;
    };
  }
  function wrap(innerFn, outerFn, self, tryLocsList) {
    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator,
      generator = Object.create(protoGenerator.prototype),
      context = new Context(tryLocsList || []);
    return defineProperty(generator, "_invoke", {
      value: makeInvokeMethod(innerFn, self, context)
    }), generator;
  }
  function tryCatch(fn, obj, arg) {
    try {
      return {
        type: "normal",
        arg: fn.call(obj, arg)
      };
    } catch (err) {
      return {
        type: "throw",
        arg: err
      };
    }
  }
  exports.wrap = wrap;
  var ContinueSentinel = {};
  function Generator() {}
  function GeneratorFunction() {}
  function GeneratorFunctionPrototype() {}
  var IteratorPrototype = {};
  define(IteratorPrototype, iteratorSymbol, function () {
    return this;
  });
  var getProto = Object.getPrototypeOf,
    NativeIteratorPrototype = getProto && getProto(getProto(values([])));
  NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype);
  var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);
  function defineIteratorMethods(prototype) {
    ["next", "throw", "return"].forEach(function (method) {
      define(prototype, method, function (arg) {
        return this._invoke(method, arg);
      });
    });
  }
  function AsyncIterator(generator, PromiseImpl) {
    function invoke(method, arg, resolve, reject) {
      var record = tryCatch(generator[method], generator, arg);
      if ("throw" !== record.type) {
        var result = record.arg,
          value = result.value;
        return value && "object" == typeof value && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) {
          invoke("next", value, resolve, reject);
        }, function (err) {
          invoke("throw", err, resolve, reject);
        }) : PromiseImpl.resolve(value).then(function (unwrapped) {
          result.value = unwrapped, resolve(result);
        }, function (error) {
          return invoke("throw", error, resolve, reject);
        });
      }
      reject(record.arg);
    }
    var previousPromise;
    defineProperty(this, "_invoke", {
      value: function (method, arg) {
        function callInvokeWithMethodAndArg() {
          return new PromiseImpl(function (resolve, reject) {
            invoke(method, arg, resolve, reject);
          });
        }
        return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
      }
    });
  }
  function makeInvokeMethod(innerFn, self, context) {
    var state = "suspendedStart";
    return function (method, arg) {
      if ("executing" === state) throw new Error("Generator is already running");
      if ("completed" === state) {
        if ("throw" === method) throw arg;
        return doneResult();
      }
      for (context.method = method, context.arg = arg;;) {
        var delegate = context.delegate;
        if (delegate) {
          var delegateResult = maybeInvokeDelegate(delegate, context);
          if (delegateResult) {
            if (delegateResult === ContinueSentinel) continue;
            return delegateResult;
          }
        }
        if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) {
          if ("suspendedStart" === state) throw state = "completed", context.arg;
          context.dispatchException(context.arg);
        } else "return" === context.method && context.abrupt("return", context.arg);
        state = "executing";
        var record = tryCatch(innerFn, self, context);
        if ("normal" === record.type) {
          if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue;
          return {
            value: record.arg,
            done: context.done
          };
        }
        "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg);
      }
    };
  }
  function maybeInvokeDelegate(delegate, context) {
    var methodName = context.method,
      method = delegate.iterator[methodName];
    if (undefined === method) return context.delegate = null, "throw" === methodName && delegate.iterator.return && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method) || "return" !== methodName && (context.method = "throw", context.arg = new TypeError("The iterator does not provide a '" + methodName + "' method")), ContinueSentinel;
    var record = tryCatch(method, delegate.iterator, context.arg);
    if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel;
    var info = record.arg;
    return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel);
  }
  function pushTryEntry(locs) {
    var entry = {
      tryLoc: locs[0]
    };
    1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry);
  }
  function resetTryEntry(entry) {
    var record = entry.completion || {};
    record.type = "normal", delete record.arg, entry.completion = record;
  }
  function Context(tryLocsList) {
    this.tryEntries = [{
      tryLoc: "root"
    }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0);
  }
  function values(iterable) {
    if (iterable) {
      var iteratorMethod = iterable[iteratorSymbol];
      if (iteratorMethod) return iteratorMethod.call(iterable);
      if ("function" == typeof iterable.next) return iterable;
      if (!isNaN(iterable.length)) {
        var i = -1,
          next = function next() {
            for (; ++i < iterable.length;) if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next;
            return next.value = undefined, next.done = !0, next;
          };
        return next.next = next;
      }
    }
    return {
      next: doneResult
    };
  }
  function doneResult() {
    return {
      value: undefined,
      done: !0
    };
  }
  return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, "constructor", {
    value: GeneratorFunctionPrototype,
    configurable: !0
  }), defineProperty(GeneratorFunctionPrototype, "constructor", {
    value: GeneratorFunction,
    configurable: !0
  }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) {
    var ctor = "function" == typeof genFun && genFun.constructor;
    return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name));
  }, exports.mark = function (genFun) {
    return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun;
  }, exports.awrap = function (arg) {
    return {
      __await: arg
    };
  }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () {
    return this;
  }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) {
    void 0 === PromiseImpl && (PromiseImpl = Promise);
    var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl);
    return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) {
      return result.done ? result.value : iter.next();
    });
  }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () {
    return this;
  }), define(Gp, "toString", function () {
    return "[object Generator]";
  }), exports.keys = function (val) {
    var object = Object(val),
      keys = [];
    for (var key in object) keys.push(key);
    return keys.reverse(), function next() {
      for (; keys.length;) {
        var key = keys.pop();
        if (key in object) return next.value = key, next.done = !1, next;
      }
      return next.done = !0, next;
    };
  }, exports.values = values, Context.prototype = {
    constructor: Context,
    reset: function (skipTempReset) {
      if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined);
    },
    stop: function () {
      this.done = !0;
      var rootRecord = this.tryEntries[0].completion;
      if ("throw" === rootRecord.type) throw rootRecord.arg;
      return this.rval;
    },
    dispatchException: function (exception) {
      if (this.done) throw exception;
      var context = this;
      function handle(loc, caught) {
        return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught;
      }
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i],
          record = entry.completion;
        if ("root" === entry.tryLoc) return handle("end");
        if (entry.tryLoc <= this.prev) {
          var hasCatch = hasOwn.call(entry, "catchLoc"),
            hasFinally = hasOwn.call(entry, "finallyLoc");
          if (hasCatch && hasFinally) {
            if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0);
            if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc);
          } else if (hasCatch) {
            if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0);
          } else {
            if (!hasFinally) throw new Error("try statement without catch or finally");
            if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc);
          }
        }
      }
    },
    abrupt: function (type, arg) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) {
          var finallyEntry = entry;
          break;
        }
      }
      finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null);
      var record = finallyEntry ? finallyEntry.completion : {};
      return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record);
    },
    complete: function (record, afterLoc) {
      if ("throw" === record.type) throw record.arg;
      return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel;
    },
    finish: function (finallyLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel;
      }
    },
    catch: function (tryLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc === tryLoc) {
          var record = entry.completion;
          if ("throw" === record.type) {
            var thrown = record.arg;
            resetTryEntry(entry);
          }
          return thrown;
        }
      }
      throw new Error("illegal catch attempt");
    },
    delegateYield: function (iterable, resultName, nextLoc) {
      return this.delegate = {
        iterator: values(iterable),
        resultName: resultName,
        nextLoc: nextLoc
      }, "next" === this.method && (this.arg = undefined), ContinueSentinel;
    }
  }, exports;
}

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
  try {
    var info = gen[key](arg);
    var value = info.value;
  } catch (error) {
    reject(error);
    return;
  }
  if (info.done) {
    resolve(value);
  } else {
    Promise.resolve(value).then(_next, _throw);
  }
}
function _asyncToGenerator(fn) {
  return function () {
    var self = this,
      args = arguments;
    return new Promise(function (resolve, reject) {
      var gen = fn.apply(self, args);
      function _next(value) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
      }
      function _throw(err) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
      }
      _next(undefined);
    });
  };
}

function _arrayWithHoles(arr) {
  if (Array.isArray(arr)) return arr;
}

function _iterableToArrayLimit(arr, i) {
  var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"];
  if (null != _i) {
    var _s,
      _e,
      _x,
      _r,
      _arr = [],
      _n = !0,
      _d = !1;
    try {
      if (_x = (_i = _i.call(arr)).next, 0 === i) {
        if (Object(_i) !== _i) return;
        _n = !1;
      } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0);
    } catch (err) {
      _d = !0, _e = err;
    } finally {
      try {
        if (!_n && null != _i.return && (_r = _i.return(), Object(_r) !== _r)) return;
      } finally {
        if (_d) throw _e;
      }
    }
    return _arr;
  }
}

function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];
  return arr2;
}

function _unsupportedIterableToArray(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}

function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

function _slicedToArray(arr, i) {
  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
}

var mediaControllerSelector$m = function mediaControllerSelector(_ref) {
  var _element = _ref._element,
    setLive = _ref.setLive,
    fullscreen = _ref.fullscreen,
    togglePlay = _ref.togglePlay,
    _updateMediaStream = _ref._updateMediaStream,
    deviceIds = _ref.deviceIds;
  return {
    _element: _element,
    setLive: setLive,
    fullscreen: fullscreen,
    togglePlay: togglePlay,
    _updateMediaStream: _updateMediaStream,
    deviceIds: deviceIds
  };
};
var WebRTCBroadcast = /*#__PURE__*/React.forwardRef(function (props, ref) {
  var ingestUrl = props.ingestUrl,
    title = props.title,
    aspectRatio = props.aspectRatio,
    objectFit = props.objectFit,
    webrtcConfig = props.webrtcConfig,
    onBroadcastError = props.onBroadcastError,
    onPlaybackStatusUpdate = props.onPlaybackStatusUpdate,
    playbackStatusSelector = props.playbackStatusSelector;
  var store = React.useContext(MediaControllerContext);
  var stateSelector = React.useCallback(function (state) {
    var _playbackStatusSelect;
    return (_playbackStatusSelect = playbackStatusSelector === null || playbackStatusSelector === void 0 ? void 0 : playbackStatusSelector(state)) !== null && _playbackStatusSelect !== void 0 ? _playbackStatusSelect : state;
  }, [playbackStatusSelector]);
  React.useEffect(function () {
    return store.subscribe(stateSelector, function (state, prevState) {
      return onPlaybackStatusUpdate === null || onPlaybackStatusUpdate === void 0 ? void 0 : onPlaybackStatusUpdate(sanitizeMediaControllerState(state), sanitizeMediaControllerState(prevState));
    });
  }, [onPlaybackStatusUpdate, stateSelector, store]);
  var _useMediaController = useMediaController(mediaControllerSelector$m),
    _element = _useMediaController._element,
    setLive = _useMediaController.setLive,
    fullscreen = _useMediaController.fullscreen,
    togglePlay = _useMediaController.togglePlay,
    _updateMediaStream = _useMediaController._updateMediaStream;
  var _React$useState = React.useState(null),
    _React$useState2 = _slicedToArray(_React$useState, 2),
    transceivers = _React$useState2[0],
    setTransceivers = _React$useState2[1];
  var onConnected = React.useCallback( /*#__PURE__*/function () {
    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(payload) {
      var _payload$audioTransce, _payload$audioTransce2, _payload$audioTransce3, _payload$audioTransce4, _payload$videoTransce, _payload$videoTransce2, _payload$videoTransce3, _payload$videoTransce4;
      return _regeneratorRuntime().wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _updateMediaStream(payload.stream, {
                audio: payload === null || payload === void 0 ? void 0 : (_payload$audioTransce = payload.audioTransceiver) === null || _payload$audioTransce === void 0 ? void 0 : (_payload$audioTransce2 = _payload$audioTransce.sender) === null || _payload$audioTransce2 === void 0 ? void 0 : (_payload$audioTransce3 = _payload$audioTransce2.track) === null || _payload$audioTransce3 === void 0 ? void 0 : (_payload$audioTransce4 = _payload$audioTransce3.getSettings()) === null || _payload$audioTransce4 === void 0 ? void 0 : _payload$audioTransce4.deviceId,
                video: payload === null || payload === void 0 ? void 0 : (_payload$videoTransce = payload.videoTransceiver) === null || _payload$videoTransce === void 0 ? void 0 : (_payload$videoTransce2 = _payload$videoTransce.sender) === null || _payload$videoTransce2 === void 0 ? void 0 : (_payload$videoTransce3 = _payload$videoTransce2.track) === null || _payload$videoTransce3 === void 0 ? void 0 : (_payload$videoTransce4 = _payload$videoTransce3.getSettings()) === null || _payload$videoTransce4 === void 0 ? void 0 : _payload$videoTransce4.deviceId
              });
              setTransceivers({
                audio: payload.audioTransceiver,
                video: payload.videoTransceiver
              });
              onBroadcastError === null || onBroadcastError === void 0 ? void 0 : onBroadcastError(null);
              togglePlay === null || togglePlay === void 0 ? void 0 : togglePlay(true);
              setLive(true);
            case 5:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));
    return function (_x) {
      return _ref2.apply(this, arguments);
    };
  }(), [setLive, onBroadcastError, togglePlay, _updateMediaStream]);
  var onErrorComposed = React.useCallback(function (error) {
    var _error$message$toStri, _error$message, _error$message$toStri2;
    var cleanError = new Error((_error$message$toStri = error === null || error === void 0 ? void 0 : (_error$message = error.message) === null || _error$message === void 0 ? void 0 : (_error$message$toStri2 = _error$message.toString) === null || _error$message$toStri2 === void 0 ? void 0 : _error$message$toStri2.call(_error$message)) !== null && _error$message$toStri !== void 0 ? _error$message$toStri : 'Error with WebRTC');
    onBroadcastError === null || onBroadcastError === void 0 ? void 0 : onBroadcastError(cleanError);
  }, [onBroadcastError]);
  React.useEffect(function () {
    if (_element && ingestUrl) {
      var _createNewWHIP = createNewWHIP(ingestUrl, _element, aspectRatio !== null && aspectRatio !== void 0 ? aspectRatio : '16to9', {
          onConnected: onConnected,
          onError: onErrorComposed
        }, webrtcConfig),
        destroy = _createNewWHIP.destroy;
      return function () {
        destroy === null || destroy === void 0 ? void 0 : destroy();
      };
    }
  }, [aspectRatio, _element, onConnected, ingestUrl, onBroadcastError, onErrorComposed]);
  React.useEffect(function () {
    return store.subscribe(function (state, prevState) {
      var _state$_mediaStream, _prevState$_mediaStre;
      // if the media stream changes
      if (((_state$_mediaStream = state._mediaStream) === null || _state$_mediaStream === void 0 ? void 0 : _state$_mediaStream.id) !== ((_prevState$_mediaStre = prevState._mediaStream) === null || _prevState$_mediaStre === void 0 ? void 0 : _prevState$_mediaStre.id) && state._element && transceivers && state._mediaStream) {
        changeMediaStream({
          newMediaStream: state._mediaStream,
          prevMediaStream: prevState._mediaStream,
          aspectRatio: aspectRatio !== null && aspectRatio !== void 0 ? aspectRatio : '16to9',
          element: state._element,
          videoTransceiver: transceivers.video,
          audioTransceiver: transceivers.audio,
          onConnected: onConnected
        }).catch(function (e) {
          return onErrorComposed(e);
        });
      }
    });
  }, [store, transceivers, aspectRatio, onConnected, onErrorComposed]);
  return /*#__PURE__*/jsx("video", {
    className: styling.media.video({
      size: fullscreen ? 'fullscreen' : objectFit
    }),
    "aria-label": title !== null && title !== void 0 ? title : 'Video player',
    role: "video",
    width: "100%",
    height: "100%",
    ref: ref,
    "webkit-playsinline": "true",
    playsInline: true,
    muted: true
  });
});

var AVSelect = function AVSelect(_ref) {
  var value = _ref.value,
    onChange = _ref.onChange,
    type = _ref.type,
    portalContainer = _ref.portalContainer,
    mediaDevices = _ref.mediaDevices;
  var screenshareId = useMemo(function () {
    if (value && mediaDevices.every(function (mediaDevice) {
      return value !== mediaDevice.deviceId;
    })) {
      var _splitValue$;
      var splitValue = value.split(':', 2);
      var newValue = splitValue.length > 1 ? "".concat((_splitValue$ = splitValue[0]) === null || _splitValue$ === void 0 ? void 0 : _splitValue$.slice(0, 10), "...").concat(value.slice(-4)) : value.slice(0, 8);
      return newValue !== null && newValue !== void 0 ? newValue : 'screen';
    }
    return null;
  }, [mediaDevices, value]);
  return /*#__PURE__*/jsxs("div", {
    className: styling.settings.select.group(),
    children: [/*#__PURE__*/jsx("label", {
      className: styling.settings.select.label(),
      htmlFor: type === 'audio' ? 'audio-source' : 'video-source',
      children: type === 'audio' ? 'Audio Source' : 'Video Source'
    }), /*#__PURE__*/jsxs(Select.Root, {
      disabled: mediaDevices.length === 0,
      value: value,
      onValueChange: onChange,
      name: type === 'audio' ? 'audio-source' : 'video-source',
      children: [/*#__PURE__*/jsxs(Select.Trigger, {
        className: styling.settings.select.trigger(),
        "aria-label": type === 'audio' ? 'Audio Source' : 'Video Source',
        children: [/*#__PURE__*/jsx(Select.Value, {
          placeholder: type === 'audio' ? 'Select your audio source...' : 'Select your video source...'
        }), /*#__PURE__*/jsx(Select.Icon, {
          className: styling.settings.select.icon(),
          children: /*#__PURE__*/jsx(ChevronDownIcon, {})
        })]
      }), /*#__PURE__*/jsx(Select.Portal, {
        container: portalContainer,
        children: /*#__PURE__*/jsx(Select.Content, {
          className: styling.settings.select.content(),
          children: /*#__PURE__*/jsx(Select.Viewport, {
            className: styling.settings.select.viewport(),
            children: /*#__PURE__*/jsxs(Select.Group, {
              children: [mediaDevices.map(function (mediaDevice, i) {
                var _mediaDevice$label;
                return /*#__PURE__*/jsxs(Select.Item, {
                  value: mediaDevice.deviceId,
                  className: styling.settings.select.item(),
                  children: [/*#__PURE__*/jsx(Select.ItemText, {
                    children: (_mediaDevice$label = mediaDevice.label) !== null && _mediaDevice$label !== void 0 ? _mediaDevice$label : "".concat(type === 'audio' ? "Audio Source" : "Video Source", " ").concat(i + 1, " (").concat(mediaDevice.deviceId === 'default' ? 'default' : mediaDevice.deviceId.slice(0, 6), ")")
                  }), /*#__PURE__*/jsx(Select.ItemIndicator, {
                    className: styling.settings.select.itemIndicator(),
                    children: /*#__PURE__*/jsx(SelectedIcon, {})
                  })]
                }, mediaDevice.deviceId);
              }), value && screenshareId && /*#__PURE__*/jsxs(Select.Item, {
                value: value,
                className: styling.settings.select.item(),
                children: [/*#__PURE__*/jsx(Select.ItemText, {
                  children: "Screen Source (".concat(screenshareId, ")")
                }), /*#__PURE__*/jsx(Select.ItemIndicator, {
                  className: styling.settings.select.itemIndicator(),
                  children: /*#__PURE__*/jsx(SelectedIcon, {})
                })]
              }, value)]
            })
          })
        })
      })]
    })]
  });
};
var ChevronDownIcon = function ChevronDownIcon() {
  return /*#__PURE__*/jsx("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    height: "20",
    viewBox: "0 -960 960 960",
    width: "20",
    children: /*#__PURE__*/jsx("path", {
      fill: "currentColor",
      d: "M480-345 240-585l43-43 197 198 197-197 43 43-240 239Z"
    })
  });
};
var SelectedIcon = function SelectedIcon() {
  return /*#__PURE__*/jsx("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    height: "16",
    viewBox: "0 -960 960 960",
    width: "16",
    children: /*#__PURE__*/jsx("path", {
      d: "M378-246 154-470l43-43 181 181 384-384 43 43-427 427Z"
    })
  });
};

var mediaControllerSelector$l = function mediaControllerSelector(_ref) {
  var deviceIds = _ref.deviceIds,
    _updateMediaStream = _ref._updateMediaStream;
  return {
    deviceIds: deviceIds,
    _updateMediaStream: _updateMediaStream
  };
};
var AudioSourceSelect = function AudioSourceSelect(_ref2) {
  var portalContainer = _ref2.portalContainer,
    streamConstraints = _ref2.streamConstraints;
  var _useMediaController = useMediaController(mediaControllerSelector$l),
    deviceIds = _useMediaController.deviceIds,
    _updateMediaStream = _useMediaController._updateMediaStream;
  var _React$useState = React.useState(null),
    _React$useState2 = _slicedToArray(_React$useState, 2),
    mediaDevices = _React$useState2[0],
    setMediaDevices = _React$useState2[1];
  React.useEffect(function () {
    var destroy = getMediaDevices(function (devices) {
      setMediaDevices(devices.filter(function (device) {
        return device.kind === 'audioinput';
      }));
    });
    return destroy;
  }, []);
  var onAudioChange = React.useCallback( /*#__PURE__*/function () {
    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(id) {
      var _deviceIds$video, _ref4;
      var mediaStream;
      return _regeneratorRuntime().wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return getUserMedia({
                source: {
                  streamConstraints: streamConstraints,
                  videoDeviceId: (_deviceIds$video = deviceIds === null || deviceIds === void 0 ? void 0 : deviceIds.video) !== null && _deviceIds$video !== void 0 ? _deviceIds$video : undefined,
                  audioDeviceId: (_ref4 = id !== null && id !== void 0 ? id : deviceIds === null || deviceIds === void 0 ? void 0 : deviceIds.audio) !== null && _ref4 !== void 0 ? _ref4 : undefined
                }
              });
            case 2:
              mediaStream = _context.sent;
              if (mediaStream) {
                _updateMediaStream(mediaStream);
              }
            case 4:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));
    return function (_x) {
      return _ref3.apply(this, arguments);
    };
  }(), [_updateMediaStream, deviceIds, streamConstraints]);
  return /*#__PURE__*/jsx(AVSelect, {
    type: "audio",
    onChange: onAudioChange,
    value: deviceIds === null || deviceIds === void 0 ? void 0 : deviceIds.audio,
    mediaDevices: mediaDevices !== null && mediaDevices !== void 0 ? mediaDevices : [],
    portalContainer: portalContainer
  });
};

var DefaultMutedIcon$1 = function DefaultMutedIcon() {
  return /*#__PURE__*/jsx("svg", {
    width: "100%",
    height: "100%",
    viewBox: "-320 -1270 1600 1600",
    children: /*#__PURE__*/jsx("path", {
      fill: "currentColor",
      d: "m686-361-43-43q21-26 31-58.5t10-66.5h60q0 46-15 89t-43 79ZM461-586Zm97 97-53-52v-238q0-17.425-11.788-29.213Q481.425-820 464-820q-17.425 0-29.212 11.787Q423-796.425 423-779v155l-60-60v-95q0-42.083 29.441-71.542Q421.882-880 463.941-880t71.559 29.458Q565-821.083 565-779v250q0 8-1.5 20t-5.5 20ZM434-120v-136q-106-11-178-89t-72-184h60q0 91 64.5 153T464-314q38 0 73.11-12.337Q572.221-338.675 601-361l43 43q-31 26-69.014 41.568Q536.972-260.865 494-256v136h-60Zm397 65L36-850l38-38L869-93l-38 38Z"
    })
  });
};
var DefaultUnmutedIcon$1 = function DefaultUnmutedIcon() {
  return /*#__PURE__*/jsx("svg", {
    width: "100%",
    height: "100%",
    viewBox: "-320 -1270 1600 1600",
    children: /*#__PURE__*/jsx("path", {
      fill: "currentColor",
      d: "M480-423q-43 0-72-30.917-29-30.916-29-75.083v-251q0-41.667 29.441-70.833Q437.882-880 479.941-880t71.559 29.167Q581-821.667 581-780v251q0 44.167-29 75.083Q523-423 480-423Zm0-228Zm-30 531v-136q-106-11-178-89t-72-184h60q0 91 64.288 153t155.5 62Q571-314 635.5-376 700-438 700-529h60q0 106-72 184t-178 89v136h-60Zm30-363q18 0 29.5-13.5T521-529v-251q0-17-11.788-28.5Q497.425-820 480-820q-17.425 0-29.212 11.5Q439-797 439-780v251q0 19 11.5 32.5T480-483Z"
    })
  });
};
var mediaControllerSelector$k = function mediaControllerSelector(_ref) {
  var isVolumeChangeSupported = _ref.isVolumeChangeSupported,
    requestToggleMute = _ref.requestToggleMute,
    requestVolume = _ref.requestVolume,
    muted = _ref.muted,
    volume = _ref.volume;
  return {
    isVolumeChangeSupported: isVolumeChangeSupported,
    requestToggleMute: requestToggleMute,
    requestVolume: requestVolume,
    muted: muted,
    volume: volume
  };
};
var AudioToggle = function AudioToggle(props) {
  var _useMediaController = useMediaController(mediaControllerSelector$k),
    volume = _useMediaController.volume,
    requestToggleMute = _useMediaController.requestToggleMute,
    muted = _useMediaController.muted,
    requestVolume = _useMediaController.requestVolume,
    isVolumeChangeSupported = _useMediaController.isVolumeChangeSupported;
  var _useVolume = useVolume(_objectSpread2({
      volume: volume,
      requestToggleMute: requestToggleMute,
      muted: muted,
      requestVolume: requestVolume,
      isVolumeChangeSupported: isVolumeChangeSupported,
      defaultMutedIcon: /*#__PURE__*/jsx(DefaultMutedIcon$1, {}),
      defaultUnmutedIcon: /*#__PURE__*/jsx(DefaultUnmutedIcon$1, {})
    }, props)),
    buttonProps = _useVolume.buttonProps,
    title = _useVolume.title;
  return /*#__PURE__*/jsx("div", {
    className: styling.volume.container(),
    children: /*#__PURE__*/jsx("button", _objectSpread2({
      style: {
        width: props.size,
        height: props.size
      },
      className: styling.iconButton.button(),
      title: title,
      "aria-label": title,
      onClick: buttonProps.onPress
    }, omit(buttonProps, 'onPress', 'size')))
  });
};

var mediaControllerSelector$j = function mediaControllerSelector(_ref) {
  var deviceIds = _ref.deviceIds,
    _updateMediaStream = _ref._updateMediaStream;
  return {
    deviceIds: deviceIds,
    _updateMediaStream: _updateMediaStream
  };
};
var VideoSourceSelect = function VideoSourceSelect(_ref2) {
  var portalContainer = _ref2.portalContainer,
    streamConstraints = _ref2.streamConstraints;
  var _useMediaController = useMediaController(mediaControllerSelector$j),
    deviceIds = _useMediaController.deviceIds,
    _updateMediaStream = _useMediaController._updateMediaStream;
  var _React$useState = React.useState(null),
    _React$useState2 = _slicedToArray(_React$useState, 2),
    mediaDevices = _React$useState2[0],
    setMediaDevices = _React$useState2[1];
  React.useEffect(function () {
    var destroy = getMediaDevices(function (devices) {
      setMediaDevices(devices.filter(function (device) {
        return device.kind === 'videoinput';
      }));
    });
    return destroy;
  }, []);
  var onVideoChange = React.useCallback( /*#__PURE__*/function () {
    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(id) {
      var _ref4, _deviceIds$audio;
      var mediaStream;
      return _regeneratorRuntime().wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return getUserMedia({
                source: {
                  streamConstraints: streamConstraints,
                  videoDeviceId: (_ref4 = id !== null && id !== void 0 ? id : deviceIds === null || deviceIds === void 0 ? void 0 : deviceIds.video) !== null && _ref4 !== void 0 ? _ref4 : undefined,
                  audioDeviceId: (_deviceIds$audio = deviceIds === null || deviceIds === void 0 ? void 0 : deviceIds.audio) !== null && _deviceIds$audio !== void 0 ? _deviceIds$audio : undefined
                }
              });
            case 2:
              mediaStream = _context.sent;
              if (mediaStream) {
                _updateMediaStream(mediaStream);
              }
            case 4:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));
    return function (_x) {
      return _ref3.apply(this, arguments);
    };
  }(), [_updateMediaStream, deviceIds, streamConstraints]);
  return /*#__PURE__*/jsx(AVSelect, {
    type: "video",
    onChange: onVideoChange,
    value: deviceIds === null || deviceIds === void 0 ? void 0 : deviceIds.video,
    mediaDevices: mediaDevices !== null && mediaDevices !== void 0 ? mediaDevices : [],
    portalContainer: portalContainer
  });
};

var DefaultSettingsIcon = function DefaultSettingsIcon() {
  return /*#__PURE__*/jsx("svg", {
    width: "100%",
    height: "100%",
    viewBox: "0 0 36 36",
    children: /*#__PURE__*/jsx("path", {
      d: "m 23.94,18.78 c .03,-0.25 .05,-0.51 .05,-0.78 0,-0.27 -0.02,-0.52 -0.05,-0.78 l 1.68,-1.32 c .15,-0.12 .19,-0.33 .09,-0.51 l -1.6,-2.76 c -0.09,-0.17 -0.31,-0.24 -0.48,-0.17 l -1.99,.8 c -0.41,-0.32 -0.86,-0.58 -1.35,-0.78 l -0.30,-2.12 c -0.02,-0.19 -0.19,-0.33 -0.39,-0.33 l -3.2,0 c -0.2,0 -0.36,.14 -0.39,.33 l -0.30,2.12 c -0.48,.2 -0.93,.47 -1.35,.78 l -1.99,-0.8 c -0.18,-0.07 -0.39,0 -0.48,.17 l -1.6,2.76 c -0.10,.17 -0.05,.39 .09,.51 l 1.68,1.32 c -0.03,.25 -0.05,.52 -0.05,.78 0,.26 .02,.52 .05,.78 l -1.68,1.32 c -0.15,.12 -0.19,.33 -0.09,.51 l 1.6,2.76 c .09,.17 .31,.24 .48,.17 l 1.99,-0.8 c .41,.32 .86,.58 1.35,.78 l .30,2.12 c .02,.19 .19,.33 .39,.33 l 3.2,0 c .2,0 .36,-0.14 .39,-0.33 l .30,-2.12 c .48,-0.2 .93,-0.47 1.35,-0.78 l 1.99,.8 c .18,.07 .39,0 .48,-0.17 l 1.6,-2.76 c .09,-0.17 .05,-0.39 -0.09,-0.51 l -1.68,-1.32 0,0 z m -5.94,2.01 c -1.54,0 -2.8,-1.25 -2.8,-2.8 0,-1.54 1.25,-2.8 2.8,-2.8 1.54,0 2.8,1.25 2.8,2.8 0,1.54 -1.25,2.8 -2.8,2.8 l 0,0 z",
      fill: "currentColor"
    })
  });
};
var mediaControllerSelector$i = function mediaControllerSelector(_ref) {
  var _element = _ref._element;
  return {
    _element: _element
  };
};
var BroadcastSettings = function BroadcastSettings(props) {
  var _props$icon, _element$parentElemen, _element$parentElemen2, _element$parentElemen3;
  var _useMediaController = useMediaController(mediaControllerSelector$i),
    _element = _useMediaController._element;
  return /*#__PURE__*/jsx("div", {
    className: styling.volume.container(),
    children: /*#__PURE__*/jsxs(Dialog.Root, {
      children: [/*#__PURE__*/jsx(Dialog.Trigger, {
        asChild: true,
        children: /*#__PURE__*/jsx("button", _objectSpread2(_objectSpread2({
          style: {
            width: props.size,
            height: props.size
          },
          className: styling.iconButton.button(),
          title: "Broadcast settings",
          "aria-label": "Broadcast settings"
        }, omit(props, 'icon', 'size', 'streamConstraints')), {}, {
          children: (_props$icon = props === null || props === void 0 ? void 0 : props.icon) !== null && _props$icon !== void 0 ? _props$icon : /*#__PURE__*/jsx(DefaultSettingsIcon, {})
        }))
      }), /*#__PURE__*/jsxs(Dialog.Portal, {
        container: (_element$parentElemen = _element === null || _element === void 0 ? void 0 : _element.parentElement) !== null && _element$parentElemen !== void 0 ? _element$parentElemen : _element,
        children: [/*#__PURE__*/jsx(Dialog.Overlay, {
          className: styling.settings.overlay()
        }), /*#__PURE__*/jsxs(Dialog.Content, {
          className: styling.settings.content(),
          children: [/*#__PURE__*/jsx(Dialog.Title, {
            className: styling.settings.title(),
            children: "Settings"
          }), /*#__PURE__*/jsx(VideoSourceSelect, {
            streamConstraints: props.streamConstraints,
            portalContainer: (_element$parentElemen2 = _element === null || _element === void 0 ? void 0 : _element.parentElement) !== null && _element$parentElemen2 !== void 0 ? _element$parentElemen2 : _element
          }), /*#__PURE__*/jsx(AudioSourceSelect, {
            streamConstraints: props.streamConstraints,
            portalContainer: (_element$parentElemen3 = _element === null || _element === void 0 ? void 0 : _element.parentElement) !== null && _element$parentElemen3 !== void 0 ? _element$parentElemen3 : _element
          }), /*#__PURE__*/jsx(Dialog.Close, {
            asChild: true,
            children: /*#__PURE__*/jsx("button", {
              className: styling.settings.close(),
              "aria-label": "Close",
              children: /*#__PURE__*/jsx(CloseIcon, {})
            })
          })]
        })]
      })]
    })
  });
};
var CloseIcon = function CloseIcon() {
  return /*#__PURE__*/jsx("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    height: "48",
    viewBox: "0 -960 960 960",
    width: "48",
    children: /*#__PURE__*/jsx("path", {
      d: "m249-207-42-42 231-231-231-231 42-42 231 231 231-231 42 42-231 231 231 231-42 42-231-231-231 231Z"
    })
  });
};

var DefaultScreenshareIcon = function DefaultScreenshareIcon() {
  return /*#__PURE__*/jsx("svg", {
    width: "100%",
    height: "100%",
    viewBox: "-340 -1265 1600 1600",
    children: /*#__PURE__*/jsx("path", {
      fill: "currentColor",
      d: "M451-328h59v-194l79 81 43-43-153-152-152 152 43 43 81-81v194ZM140-160q-24 0-42-18t-18-42v-520q0-24 18-42t42-18h680q24 0 42 18t18 42v520q0 24-18 42t-42 18H140Zm0-60h680v-520H140v520Zm0 0v-520 520Z"
    })
  });
};
var mediaControllerSelector$h = function mediaControllerSelector(_ref) {
  var _updateMediaStream = _ref._updateMediaStream;
  return {
    _updateMediaStream: _updateMediaStream
  };
};
var Screenshare = function Screenshare(props) {
  var _props$icon;
  var _useMediaController = useMediaController(mediaControllerSelector$h),
    _updateMediaStream = _useMediaController._updateMediaStream;
  var onPressComposed = useCallback( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
    var mediaStream;
    return _regeneratorRuntime().wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return getDisplayMedia(props === null || props === void 0 ? void 0 : props.options);
          case 2:
            mediaStream = _context.sent;
            if (mediaStream) {
              _updateMediaStream(mediaStream);
            }
          case 4:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  })), [_updateMediaStream, props === null || props === void 0 ? void 0 : props.options]);
  return /*#__PURE__*/jsx("button", _objectSpread2(_objectSpread2({
    style: {
      width: props.size,
      height: props.size
    },
    className: styling.iconButton.button(),
    title: "Screen share",
    "aria-label": "Screen share"
  }, omit(props, 'icon', 'options', 'size')), {}, {
    onClick: onPressComposed,
    children: (_props$icon = props === null || props === void 0 ? void 0 : props.icon) !== null && _props$icon !== void 0 ? _props$icon : /*#__PURE__*/jsx(DefaultScreenshareIcon, {})
  }));
};

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }
  return target;
}

function _objectWithoutProperties(source, excluded) {
  if (source == null) return {};
  var target = _objectWithoutPropertiesLoose(source, excluded);
  var key, i;
  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }
  return target;
}

var _excluded$1 = ["onIcon", "offIcon", "onPress"];
var DefaultOnIcon = function DefaultOnIcon() {
  return /*#__PURE__*/jsx("svg", {
    width: "100%",
    height: "100%",
    viewBox: "-340 -1265 1600 1600",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    children: /*#__PURE__*/jsx("path", {
      fill: "currentColor",
      d: "M140-160q-24 0-42-18t-18-42v-520q0-24 18-42t42-18h520q24 0 42 18t18 42v215l160-160v410L720-435v215q0 24-18 42t-42 18H140Zm0-60h520v-520H140v520Zm0 0v-520 520Z"
    })
  });
};
var DefaultOffIcon = function DefaultOffIcon() {
  return /*#__PURE__*/jsx("svg", {
    width: "100%",
    height: "100%",
    viewBox: "-340 -1265 1600 1600",
    fill: "none",
    children: /*#__PURE__*/jsx("path", {
      fill: "currentColor",
      d: "M880-275 720-435v111l-60-60v-356H304l-60-60h416q24 0 42 18t18 42v215l160-160v410ZM848-27 39-836l42-42L890-69l-42 42ZM484-560Zm-87 82ZM159-800l60 60h-79v520h520v-79l60 60v19q0 24-18 42t-42 18H140q-24 0-42-18t-18-42v-520q0-24 18-42t42-18h19Z"
    })
  });
};
var mediaControllerSelector$g = function mediaControllerSelector(_ref) {
  var toggleVideo = _ref.toggleVideo,
    video = _ref.video;
  return {
    toggleVideo: toggleVideo,
    video: video
  };
};
var VideoToggle = function VideoToggle(props) {
  var _useMediaController = useMediaController(mediaControllerSelector$g),
    toggleVideo = _useMediaController.toggleVideo,
    video = _useMediaController.video;
  var onIcon = props.onIcon,
    offIcon = props.offIcon,
    onPress = props.onPress,
    rest = _objectWithoutProperties(props, _excluded$1);
  var onPressComposed = /*#__PURE__*/function () {
    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
      return _regeneratorRuntime().wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return onPress === null || onPress === void 0 ? void 0 : onPress();
            case 2:
              _context.next = 4;
              return toggleVideo();
            case 4:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));
    return function onPressComposed() {
      return _ref2.apply(this, arguments);
    };
  }();
  var children = useConditionalIcon(Boolean(video), onIcon, /*#__PURE__*/jsx(DefaultOnIcon, {}), offIcon, /*#__PURE__*/jsx(DefaultOffIcon, {}));
  var title = useMemo(function () {
    return video ? 'Turn video off (v)' : 'Turn video on (v)';
  }, [video]);
  return /*#__PURE__*/jsx("button", _objectSpread2(_objectSpread2({
    style: {
      width: props.size,
      height: props.size
    },
    className: styling.iconButton.button(),
    title: title,
    "aria-label": title,
    onClick: onPressComposed
  }, omit(rest, 'size')), {}, {
    children: children
  }));
};

var UPDATE_FREQUENCY_MS = 50;
var mediaControllerSelector$f = function mediaControllerSelector(_ref) {
  var device = _ref.device;
  return {
    device: device
  };
};
var BaseSlider = function BaseSlider(props) {
  var _useMediaController = useMediaController(mediaControllerSelector$f),
    device = _useMediaController.device;
  var ref = React.useRef(null);
  var _React$useState = React.useState({
      width: 0,
      left: 0
    }),
    _React$useState2 = _slicedToArray(_React$useState, 2),
    sliderLocation = _React$useState2[0],
    setSliderLocation = _React$useState2[1];
  React.useEffect(function () {
    if (typeof window !== 'undefined') {
      var handleResize = function handleResize() {
        var _ref$current, _boundingRect$width, _boundingRect$left;
        var boundingRect = (_ref$current = ref.current) === null || _ref$current === void 0 ? void 0 : _ref$current.getBoundingClientRect();
        setSliderLocation({
          width: (_boundingRect$width = boundingRect === null || boundingRect === void 0 ? void 0 : boundingRect.width) !== null && _boundingRect$width !== void 0 ? _boundingRect$width : 0,
          left: (_boundingRect$left = boundingRect === null || boundingRect === void 0 ? void 0 : boundingRect.left) !== null && _boundingRect$left !== void 0 ? _boundingRect$left : 0
        });
      };
      handleResize();
      window.addEventListener('resize', handleResize);
      return function () {
        return window.removeEventListener('resize', handleResize);
      };
    }
  }, []);
  var _React$useState3 = React.useState(false),
    _React$useState4 = _slicedToArray(_React$useState3, 2),
    isActive = _React$useState4[0],
    setIsActive = _React$useState4[1];
  var _React$useState5 = React.useState(0),
    _React$useState6 = _slicedToArray(_React$useState5, 2),
    lastUpdate = _React$useState6[0],
    setLastUpdate = _React$useState6[1];
  var _useBaseSlider = useBaseSlider(_objectSpread2({
      isActive: isActive || (device === null || device === void 0 ? void 0 : device.isMobile),
      sliderWidth: sliderLocation.width,
      defaultThumbIcon: /*#__PURE__*/jsx(Thumb, {})
    }, props)),
    title = _useBaseSlider.title,
    value = _useBaseSlider.value,
    active = _useBaseSlider.active,
    handle = _useBaseSlider.handle,
    sliderProps = _useBaseSlider.sliderProps,
    sliderLeftTrackProps = _useBaseSlider.sliderLeftTrackProps,
    sliderMiddleTrackProps = _useBaseSlider.sliderMiddleTrackProps,
    sliderRightTrackProps = _useBaseSlider.sliderRightTrackProps;
  var _React$useState7 = React.useState(false),
    _React$useState8 = _slicedToArray(_React$useState7, 2),
    isDragging = _React$useState8[0],
    setIsDragging = _React$useState8[1];
  React.useEffect(function () {
    if (isDragging) {
      var _document, _document2, _document3, _document4;
      var onMouseMove = /*#__PURE__*/function () {
        var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(e) {
          var shouldUpdate;
          return _regeneratorRuntime().wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  shouldUpdate = Date.now() - lastUpdate > UPDATE_FREQUENCY_MS;
                  _context.next = 3;
                  return sliderProps.onUpdate(e.clientX - sliderLocation.left, shouldUpdate);
                case 3:
                  if (shouldUpdate) {
                    setLastUpdate(Date.now());
                  }
                case 4:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee);
        }));
        return function onMouseMove(_x) {
          return _ref2.apply(this, arguments);
        };
      }();
      var onTouchMove = /*#__PURE__*/function () {
        var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(e) {
          var _e$touches, _e$touches$item, _e$touches$item$call;
          var shouldUpdate, clientX;
          return _regeneratorRuntime().wrap(function _callee2$(_context2) {
            while (1) {
              switch (_context2.prev = _context2.next) {
                case 0:
                  shouldUpdate = Date.now() - lastUpdate > UPDATE_FREQUENCY_MS;
                  clientX = (_e$touches = e.touches) === null || _e$touches === void 0 ? void 0 : (_e$touches$item = _e$touches.item) === null || _e$touches$item === void 0 ? void 0 : (_e$touches$item$call = _e$touches$item.call(_e$touches, 0)) === null || _e$touches$item$call === void 0 ? void 0 : _e$touches$item$call.clientX;
                  if (!clientX) {
                    _context2.next = 6;
                    break;
                  }
                  _context2.next = 5;
                  return sliderProps.onUpdate(clientX - sliderLocation.left, shouldUpdate);
                case 5:
                  if (shouldUpdate) {
                    setLastUpdate(Date.now());
                  }
                case 6:
                case "end":
                  return _context2.stop();
              }
            }
          }, _callee2);
        }));
        return function onTouchMove(_x2) {
          return _ref3.apply(this, arguments);
        };
      }();
      var onMouseUp = /*#__PURE__*/function () {
        var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(e) {
          var _props$onDone;
          return _regeneratorRuntime().wrap(function _callee3$(_context3) {
            while (1) {
              switch (_context3.prev = _context3.next) {
                case 0:
                  setIsDragging(false);
                  _context3.next = 3;
                  return sliderProps.onUpdate(e.clientX - sliderLocation.left, true);
                case 3:
                  _context3.next = 5;
                  return props === null || props === void 0 ? void 0 : (_props$onDone = props.onDone) === null || _props$onDone === void 0 ? void 0 : _props$onDone.call(props);
                case 5:
                case "end":
                  return _context3.stop();
              }
            }
          }, _callee3);
        }));
        return function onMouseUp(_x3) {
          return _ref4.apply(this, arguments);
        };
      }();
      var onTouchEnd = /*#__PURE__*/function () {
        var _ref5 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(e) {
          var _e$touches$item$clien, _e$touches2, _e$touches2$item, _e$touches2$item$call, _e$changedTouches, _e$changedTouches$ite, _e$changedTouches$ite2, _props$onDone2;
          var clientX;
          return _regeneratorRuntime().wrap(function _callee4$(_context4) {
            while (1) {
              switch (_context4.prev = _context4.next) {
                case 0:
                  setIsDragging(false);
                  clientX = (_e$touches$item$clien = (_e$touches2 = e.touches) === null || _e$touches2 === void 0 ? void 0 : (_e$touches2$item = _e$touches2.item) === null || _e$touches2$item === void 0 ? void 0 : (_e$touches2$item$call = _e$touches2$item.call(_e$touches2, 0)) === null || _e$touches2$item$call === void 0 ? void 0 : _e$touches2$item$call.clientX) !== null && _e$touches$item$clien !== void 0 ? _e$touches$item$clien : (_e$changedTouches = e.changedTouches) === null || _e$changedTouches === void 0 ? void 0 : (_e$changedTouches$ite = _e$changedTouches.item) === null || _e$changedTouches$ite === void 0 ? void 0 : (_e$changedTouches$ite2 = _e$changedTouches$ite.call(_e$changedTouches, 0)) === null || _e$changedTouches$ite2 === void 0 ? void 0 : _e$changedTouches$ite2.clientX;
                  if (!clientX) {
                    _context4.next = 5;
                    break;
                  }
                  _context4.next = 5;
                  return sliderProps.onUpdate(clientX - sliderLocation.left, true);
                case 5:
                  _context4.next = 7;
                  return props === null || props === void 0 ? void 0 : (_props$onDone2 = props.onDone) === null || _props$onDone2 === void 0 ? void 0 : _props$onDone2.call(props);
                case 7:
                case "end":
                  return _context4.stop();
              }
            }
          }, _callee4);
        }));
        return function onTouchEnd(_x4) {
          return _ref5.apply(this, arguments);
        };
      }();
      (_document = document) === null || _document === void 0 ? void 0 : _document.addEventListener('mousemove', onMouseMove);
      (_document2 = document) === null || _document2 === void 0 ? void 0 : _document2.addEventListener('mouseup', onMouseUp);
      (_document3 = document) === null || _document3 === void 0 ? void 0 : _document3.addEventListener('touchmove', onTouchMove);
      (_document4 = document) === null || _document4 === void 0 ? void 0 : _document4.addEventListener('touchend', onTouchEnd);
      // TODO handle mouse out

      return function () {
        var _document5, _document6, _document7, _document8;
        (_document5 = document) === null || _document5 === void 0 ? void 0 : _document5.removeEventListener('mousemove', onMouseMove);
        (_document6 = document) === null || _document6 === void 0 ? void 0 : _document6.removeEventListener('mouseup', onMouseUp);
        (_document7 = document) === null || _document7 === void 0 ? void 0 : _document7.removeEventListener('touchmove', onTouchMove);
        (_document8 = document) === null || _document8 === void 0 ? void 0 : _document8.removeEventListener('touchend', onTouchEnd);
      };
    }
  }, [isDragging, sliderProps, props, sliderLocation, lastUpdate]);
  var onPointerDown = React.useCallback( /*#__PURE__*/function () {
    var _ref6 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(e) {
      return _regeneratorRuntime().wrap(function _callee5$(_context5) {
        while (1) {
          switch (_context5.prev = _context5.next) {
            case 0:
              _context5.next = 2;
              return sliderProps.onUpdate(e.clientX - sliderLocation.left);
            case 2:
              setIsDragging(true);
            case 3:
            case "end":
              return _context5.stop();
          }
        }
      }, _callee5);
    }));
    return function (_x5) {
      return _ref6.apply(this, arguments);
    };
  }(), [sliderProps, sliderLocation]);
  var onMouseEnter = React.useCallback( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6() {
    return _regeneratorRuntime().wrap(function _callee6$(_context6) {
      while (1) {
        switch (_context6.prev = _context6.next) {
          case 0:
            setIsActive(true);
          case 1:
          case "end":
            return _context6.stop();
        }
      }
    }, _callee6);
  })), [setIsActive]);
  var onMouseLeave = React.useCallback( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7() {
    return _regeneratorRuntime().wrap(function _callee7$(_context7) {
      while (1) {
        switch (_context7.prev = _context7.next) {
          case 0:
            setIsActive(false);
          case 1:
          case "end":
            return _context7.stop();
        }
      }
    }, _callee7);
  })), [setIsActive]);
  return /*#__PURE__*/jsxs("div", {
    ref: ref,
    onPointerDown: onPointerDown,
    onMouseEnter: onMouseEnter,
    onMouseLeave: onMouseLeave,
    role: "slider",
    "aria-valuemin": 0,
    "aria-valuemax": 100,
    "aria-valuenow": value,
    "aria-valuetext": title,
    "aria-orientation": "horizontal",
    className: styling.slider.container(),
    children: [sliderLeftTrackProps.shown && /*#__PURE__*/jsx("div", {
      className: styling.slider.track.left({
        size: active ? 'active' : 'default',
        rounded: sliderLeftTrackProps.rounded,
        css: sliderLeftTrackProps.css
      })
    }), handle, sliderMiddleTrackProps.shown && /*#__PURE__*/jsx("div", {
      className: styling.slider.track.middle({
        size: active ? 'active' : 'default',
        rounded: sliderMiddleTrackProps.rounded,
        css: sliderMiddleTrackProps.css
      })
    }), sliderRightTrackProps.shown && /*#__PURE__*/jsx("div", {
      className: styling.slider.track.right({
        size: active ? 'active' : 'default',
        rounded: sliderRightTrackProps.rounded,
        css: sliderRightTrackProps.css
      })
    })]
  });
};
var Thumb = function Thumb(_ref9) {
  var size = _ref9.size,
    css = _ref9.css;
  return /*#__PURE__*/jsx("div", {
    className: styling.slider.thumb({
      css: css,
      size: size
    })
  });
};

var mediaControllerSelector$e = function mediaControllerSelector(_ref) {
  var fullscreen = _ref.fullscreen;
  return {
    fullscreen: fullscreen
  };
};
var Container = function Container(props) {
  var children = props.children,
    aspectRatio = props.aspectRatio,
    theme = props.theme,
    tabIndex = props.tabIndex;

  // cast response from useTheme to string
  var className = useTheme(theme);
  var _useMediaController = useMediaController(mediaControllerSelector$e),
    fullscreen = _useMediaController.fullscreen;
  return /*#__PURE__*/jsx("div", {
    style: {
      display: 'contents'
    },
    className: "".concat(className ? "".concat(className, " ") : '', "livepeer-contents-container"),
    children: /*#__PURE__*/jsx("div", {
      className: "".concat(styling.container({
        aspectRatio: aspectRatio,
        size: fullscreen ? 'fullscreen' : 'default'
      }), " livepeer-aspect-ratio-container"),
      tabIndex: tabIndex !== null && tabIndex !== void 0 ? tabIndex : 0,
      children: children
    })
  });
};

var OfflineStreamImage = function OfflineStreamImage() {
  return /*#__PURE__*/jsxs("svg", {
    viewBox: "0 0 324 140",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    children: [/*#__PURE__*/jsx("path", {
      fillRule: "evenodd",
      clipRule: "evenodd",
      d: "M82 8.30584L239.745 5.68359L242.335 118.151L83.9414 118.502L82 8.30584Z",
      fill: "#97F2EF"
    }), /*#__PURE__*/jsx("path", {
      fillRule: "evenodd",
      clipRule: "evenodd",
      d: "M66 124.072L254.898 124L258 129L68.3248 128.971L66 124.072Z",
      fill: "#97F2EF"
    }), /*#__PURE__*/jsx("path", {
      fillRule: "evenodd",
      clipRule: "evenodd",
      d: "M94.2062 111.151L92.5204 15.5292L229.556 14.1187L231.803 111.716L94.2062 111.151Z",
      fill: "#4CC38A"
    }), /*#__PURE__*/jsx("path", {
      fillRule: "evenodd",
      clipRule: "evenodd",
      d: "M185 58.1481C185 70.8507 174.703 82 162 82C153.04 82 145.277 77.3008 141.48 70.0741C141.421 69.9609 141.362 69.8472 141.305 69.7328C140.965 69.0558 140.782 66.2859 140.704 64.963C140.278 66.2407 140.43 67.3765 140.507 67.9444C139.533 65.4642 139 62.7423 139 59.8519C139 47.1493 149.297 36 162 36C166.913 36 171.467 37.4132 175.204 39.8814C175.63 41.0012 176.226 43.6667 175.204 45.3704C176 44.8025 177.651 43.3259 177.888 41.963C182.27 45.9317 185 51.6082 185 58.1481Z",
      fill: "#141716"
    }), /*#__PURE__*/jsx("path", {
      d: "M140.704 64.963C140.278 66.2407 140.43 67.3765 140.507 67.9444C140.746 68.5556 141.013 69.1521 141.305 69.7328C140.965 69.0558 140.782 66.2859 140.704 64.963Z",
      fill: "#141716"
    }), /*#__PURE__*/jsx("path", {
      d: "M171 60.5003L156 70V60.6462V51L166.104 57.3994L171 60.5003Z",
      stroke: "#4CC38A",
      strokeWidth: "2.5",
      strokeLinecap: "round",
      strokeLinejoin: "round"
    }), /*#__PURE__*/jsx("path", {
      d: "M101.096 100.921L176.5 101.109M219.885 101.163L198.193 101.136",
      stroke: "#141716",
      strokeWidth: "2.5",
      strokeLinecap: "round",
      strokeLinejoin: "round"
    }), /*#__PURE__*/jsx("path", {
      fillRule: "evenodd",
      clipRule: "evenodd",
      d: "M148.197 101.161C148.197 103.28 146.472 104.998 144.344 104.998C142.215 104.998 140.49 103.28 140.49 101.161C140.49 99.042 142.215 97.3242 144.344 97.3242C146.472 97.3242 148.197 99.042 148.197 101.161Z",
      fill: "#DF0087"
    }), /*#__PURE__*/jsx("path", {
      fillRule: "evenodd",
      clipRule: "evenodd",
      d: "M148.197 101.161C148.197 103.28 146.472 104.998 144.344 104.998C142.215 104.998 140.49 103.28 140.49 101.161C140.49 99.042 142.215 97.3242 144.344 97.3242C146.472 97.3242 148.197 99.042 148.197 101.161Z",
      stroke: "#141716",
      strokeWidth: "2.5",
      strokeLinecap: "round",
      strokeLinejoin: "round"
    }), /*#__PURE__*/jsx("path", {
      d: "M93.7252 111.754L91.7752 14.7408L230.275 13.7374L232.225 112.245L93.7252 111.754Z",
      stroke: "#141716",
      strokeWidth: "2.5"
    }), /*#__PURE__*/jsx("path", {
      fillRule: "evenodd",
      clipRule: "evenodd",
      d: "M49.0868 58.0273L49.9632 88.7907L19.4093 88.9852L19.0201 58.6113L49.0868 58.0273ZM51 89.7922L50.0663 57L18 57.6228L18.4147 90L51 89.7922Z",
      fill: "#434545"
    }), /*#__PURE__*/jsx("path", {
      fillRule: "evenodd",
      clipRule: "evenodd",
      d: "M296.114 25.1881L297.132 60.7679L261.637 60.9929L261.185 25.8636L296.114 25.1881ZM298.336 61.9263L297.252 24L260 24.7203L260.482 62.1666L298.336 61.9263Z",
      fill: "#434545"
    }), /*#__PURE__*/jsx("path", {
      fillRule: "evenodd",
      clipRule: "evenodd",
      d: "M293.138 78.0001L293 67.2077L303.689 67.0001L304 77.9308L293.138 78.0001ZM304.309 78.2288L292.842 78.3019L292.696 66.9135L303.98 66.6943L304.309 78.2288ZM303.071 67.6482L293.644 67.8313L293.766 77.3599L303.346 77.2989L303.071 67.6482ZM303.362 67.3425L293.34 67.5372L293.47 77.6618L303.654 77.5969L303.362 67.3425Z",
      fill: "#434545"
    }), /*#__PURE__*/jsx("path", {
      fillRule: "evenodd",
      clipRule: "evenodd",
      d: "M303.362 67.3424L303.654 77.5969L293.47 77.6617L293.34 67.5371L303.362 67.3424ZM304 77.9307L303.689 67L293 67.2076L293.138 78L304 77.9307Z",
      fill: "#434545"
    }), /*#__PURE__*/jsx("path", {
      fillRule: "evenodd",
      clipRule: "evenodd",
      d: "M289.594 66.2179L289.78 72.7435L283.299 72.7847L283.216 66.3418L289.594 66.2179ZM290 72.9559L289.802 66L283 66.1321L283.088 73L290 72.9559Z",
      fill: "#434545"
    }), /*#__PURE__*/jsx("path", {
      fillRule: "evenodd",
      clipRule: "evenodd",
      d: "M290.309 73.254L282.792 73.3019L282.696 65.838L290.093 65.6943L290.309 73.254ZM289.594 66.218L289.78 72.7435L283.299 72.7848L283.216 66.3419L289.594 66.218ZM289.471 72.4455L283.595 72.4829L283.52 66.636L289.303 66.5237L289.471 72.4455ZM283.088 73.0001L283 66.1322L289.802 66.0001L290 72.956L283.088 73.0001Z",
      fill: "#434545"
    }), /*#__PURE__*/jsx("path", {
      fillRule: "evenodd",
      clipRule: "evenodd",
      d: "M47.442 36.3017L47.3038 47.0941L57.9925 47.3017L58.3038 36.371L47.442 36.3017ZM58.6124 36.0729L47.1459 35.9998L47 47.3883L58.284 47.6074L58.6124 36.0729ZM57.3747 46.6536L47.9476 46.4704L48.0697 36.9419L57.6496 37.0029L57.3747 46.6536ZM57.6661 46.9593L47.6438 46.7646L47.7736 36.64L57.9582 36.7048L57.6661 46.9593Z",
      fill: "#434545"
    }), /*#__PURE__*/jsx("path", {
      fillRule: "evenodd",
      clipRule: "evenodd",
      d: "M57.6661 46.9593L57.9582 36.7049L47.7736 36.64L47.6439 46.7646L57.6661 46.9593ZM58.3038 36.371L57.9926 47.3018L47.3038 47.0942L47.4421 36.3018L58.3038 36.371Z",
      fill: "#434545"
    })]
  });
};
var OfflineStreamImage$1 = OfflineStreamImage;

var PrivateStreamImage = function PrivateStreamImage() {
  return /*#__PURE__*/jsxs("svg", {
    viewBox: "0 0 324 142",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    children: [/*#__PURE__*/jsx("circle", {
      cx: "162",
      cy: "76",
      r: "23",
      stroke: "#141716",
      strokeWidth: "3",
      strokeLinecap: "round",
      strokeLinejoin: "round"
    }), /*#__PURE__*/jsx("path", {
      d: "M242 88.5C242 88.5 206.183 131 162 131C117.817 131 82 88.5 82 88.5C82 88.5 117.817 46 162 46C206.183 46 242 88.5 242 88.5Z",
      fill: "#97F2EF"
    }), /*#__PURE__*/jsx("path", {
      d: "M249 82C249 82 210.825 128 162.5 128C114.175 128 74.5 82.5 74.5 82.5C74.5 82.5 114.175 32 162.5 32C219 34 249 82 249 82Z",
      fill: "#97F2EF"
    }), /*#__PURE__*/jsx("path", {
      d: "M249 82.5C249 82.5 210.049 129 162 129C113.951 129 75 82.5 75 82.5C75 82.5 113.951 36 162 36C210.049 36 249 82.5 249 82.5Z",
      fill: "#4CC38A"
    }), /*#__PURE__*/jsx("path", {
      d: "M216.5 60.8302C202.013 51.0702 182.921 42 162 42C116.713 42 80 84.5 80 84.5C80 84.5 116.713 127 162 127C207.287 127 244 84.5 244 84.5C244 84.5 240.941 80.9589 235.5 75.921",
      stroke: "#141716",
      strokeWidth: "2.5"
    }), /*#__PURE__*/jsx("path", {
      d: "M118 117.5C117 119.5 107.5 122.7 107.5 125.5M127 121.5C123.667 126.167 117 136.7 117 141.5",
      stroke: "#97F2EF",
      strokeWidth: "2.5"
    }), /*#__PURE__*/jsx("path", {
      fillRule: "evenodd",
      clipRule: "evenodd",
      d: "M193 86C193 100.912 180.912 114 166 114C155.482 114 146.369 108.484 141.912 100C141.842 99.8672 141.773 99.7336 141.706 99.5994C141.306 98.8046 141.091 95.553 141 94C140.5 95.5 140.679 96.8333 140.769 97.5C139.626 94.5884 139 91.3932 139 88C139 73.0883 151.088 60 166 60C171.768 60 177.113 61.6589 181.5 64.5564C182 65.8709 182.7 69 181.5 71C182.434 70.3333 184.373 68.6 184.652 67C189.796 71.6589 193 78.3227 193 86Z",
      fill: "#141716"
    }), /*#__PURE__*/jsx("path", {
      d: "M141 94C140.5 95.5 140.679 96.8333 140.769 97.5C141.05 98.2174 141.363 98.9177 141.706 99.5994C141.306 98.8046 141.091 95.553 141 94Z",
      fill: "#141716"
    }), /*#__PURE__*/jsx("path", {
      d: "M170.403 79C176.754 79 182.328 84.8203 182.328 92C182.328 99.1797 177.606 105 171.254 105C167.788 105 164.552 103.266 162.328 100.523C161.871 99.9592 161.457 99.3526 161.092 98.7097C159.98 96.7509 159.328 94.4549 159.328 92C159.328 84.8203 164.051 79 170.403 79Z",
      fill: "#4CC38A"
    }), /*#__PURE__*/jsx("path", {
      d: "M70.5 43C77 48.1667 87.3 55 94.5 63M98 8C103 19.6667 113 44.8 113 52M156.5 0.5C156 12.5 158 32.5 158 32.5M223 56C231.667 50.6667 241 43 263 39",
      stroke: "#97F2EF",
      strokeWidth: "2.5"
    }), /*#__PURE__*/jsx("path", {
      fillRule: "evenodd",
      clipRule: "evenodd",
      d: "M288.028 49.4047L287.706 29.9756L312.554 29.6019L313.278 49.28L288.028 49.4047ZM313.995 49.8165L287.339 49.9481L287 29.4461L313.232 29.0515L313.995 49.8165ZM311.118 30.7687L289.203 31.0984L289.487 48.2522L311.757 48.1424L311.118 30.7687ZM311.795 30.2184L288.497 30.5688L288.798 48.7957L312.474 48.679L311.795 30.2184Z",
      fill: "#434545"
    }), /*#__PURE__*/jsx("path", {
      fillRule: "evenodd",
      clipRule: "evenodd",
      d: "M311.795 30.2182L312.475 48.6788L288.798 48.7955L288.497 30.5687L311.795 30.2182ZM313.278 49.2798L312.554 29.6017L287.706 29.9755L288.028 49.4045L313.278 49.2798Z",
      fill: "#434545"
    }), /*#__PURE__*/jsx("path", {
      d: "M308.595 29.6018V24.201C308.595 20.224 305.371 17 301.394 17V17C297.417 17 294.193 20.224 294.193 24.201V29.6018",
      stroke: "#434545",
      strokeWidth: "2"
    }), /*#__PURE__*/jsx("path", {
      fillRule: "evenodd",
      clipRule: "evenodd",
      d: "M31.9897 127.881L31.6802 109.168L55.6122 108.808L56.309 127.761L31.9897 127.881ZM57 128.278L31.3266 128.405L31 108.658L56.2646 108.278L57 128.278ZM54.2287 109.932L33.1217 110.25L33.3951 126.771L54.8443 126.665L54.2287 109.932ZM54.8812 109.402L32.4415 109.74L32.732 127.295L55.5352 127.182L54.8812 109.402Z",
      fill: "#434545"
    }), /*#__PURE__*/jsx("path", {
      fillRule: "evenodd",
      clipRule: "evenodd",
      d: "M54.8813 109.402L55.5353 127.182L32.7321 127.295L32.4416 109.74L54.8813 109.402ZM56.3091 127.761L55.6122 108.808L31.6803 109.168L31.9898 127.881L56.3091 127.761Z",
      fill: "#434545"
    }), /*#__PURE__*/jsx("path", {
      d: "M51.7984 108.808V103.606C51.7984 99.776 48.6932 96.6709 44.8628 96.6709V96.6709C41.0325 96.6709 37.9273 99.776 37.9273 103.606V108.808",
      stroke: "#434545"
    }), /*#__PURE__*/jsx("path", {
      fillRule: "evenodd",
      clipRule: "evenodd",
      d: "M16.4568 93.4225L16.3139 85.9741L27.3595 85.8309L27.6811 93.3747L16.4568 93.4225ZM28 93.5804L16.1507 93.6308L16 85.7711L27.6606 85.6199L28 93.5804ZM26.7209 86.2782L16.9793 86.4046L17.1054 92.9807L27.005 92.9386L26.7209 86.2782ZM27.0221 86.0672L16.6653 86.2016L16.7994 93.189L27.324 93.1443L27.0221 86.0672Z",
      fill: "#434545"
    }), /*#__PURE__*/jsx("path", {
      fillRule: "evenodd",
      clipRule: "evenodd",
      d: "M27.0221 86.0676L27.324 93.1447L16.7994 93.1895L16.6654 86.202L27.0221 86.0676ZM27.6811 93.3751L27.3595 85.8313L16.314 85.9746L16.4568 93.4229L27.6811 93.3751Z",
      fill: "#434545"
    }), /*#__PURE__*/jsx("path", {
      d: "M25.5992 85.831V84.201C25.5992 82.4331 24.1661 81 22.3982 81V81C20.6304 81 19.1972 82.4331 19.1972 84.201V85.831",
      stroke: "#434545"
    }), /*#__PURE__*/jsx("path", {
      fillRule: "evenodd",
      clipRule: "evenodd",
      d: "M289.419 69.8179L289.288 62.3096L299.413 62.1844L299.708 69.7762L289.419 69.8179ZM300 69.9559L289.138 70L289 62.1322L299.689 62L300 69.9559ZM299 63H290L290.013 69.4319L299.088 69.3951L299 63ZM299.104 62.3909L289.61 62.5083L289.733 69.6139L299.38 69.5748L299.104 62.3909Z",
      fill: "#434545"
    }), /*#__PURE__*/jsx("path", {
      fillRule: "evenodd",
      clipRule: "evenodd",
      d: "M299.104 62.3909L299.38 69.5748L289.733 69.6139L289.61 62.5083L299.104 62.3909ZM299.708 69.7762L299.413 62.1844L289.288 62.3096L289.419 69.8179L299.708 69.7762Z",
      fill: "#434545"
    }), /*#__PURE__*/jsx("path", {
      d: "M296.752 62.9402V61.2516C296.752 60.0081 295.744 59 294.5 59V59C293.257 59 292.249 60.0081 292.249 61.2516V62.9402",
      stroke: "#434545"
    })]
  });
};
var PrivateStreamImage$1 = PrivateStreamImage;

var OfflineStreamError = function OfflineStreamError(_ref) {
  var isBroadcast = _ref.isBroadcast;
  return /*#__PURE__*/jsxs("div", {
    className: styling.controlsContainer.error.background(),
    children: [/*#__PURE__*/jsx(OfflineStreamImage$1, {}), /*#__PURE__*/jsx("div", {
      className: styling.controlsContainer.error.title(),
      children: isBroadcast ? 'Stream key invalid' : 'Stream is offline'
    }), /*#__PURE__*/jsx("div", {
      className: styling.controlsContainer.error.text(),
      children: isBroadcast ? 'The provided stream key could not be found. Please check it and try again.' : 'Playback will start automatically once the stream has started.'
    })]
  });
};
var PrivateStreamError = function PrivateStreamError() {
  return /*#__PURE__*/jsxs("div", {
    className: styling.controlsContainer.error.background(),
    children: [/*#__PURE__*/jsx(PrivateStreamImage$1, {}), /*#__PURE__*/jsx("div", {
      className: styling.controlsContainer.error.title(),
      children: "Stream is private"
    }), /*#__PURE__*/jsx("div", {
      className: styling.controlsContainer.error.text(),
      children: "It looks like you don't have permission to view this content."
    })]
  });
};
var GenericError = function GenericError(_ref2) {
  var isBroadcast = _ref2.isBroadcast;
  return /*#__PURE__*/jsxs("div", {
    className: styling.controlsContainer.error.background(),
    children: [/*#__PURE__*/jsx(OfflineStreamImage$1, {}), /*#__PURE__*/jsx("div", {
      className: styling.controlsContainer.error.title(),
      children: isBroadcast ? 'Broadcast failed' : 'Playback failed'
    }), /*#__PURE__*/jsx("div", {
      className: styling.controlsContainer.error.text(),
      children: isBroadcast ? 'There was an error with broadcasting - please try again later.' : "There was an error with playback - please wait while we are retrying in the background."
    })]
  });
};

var mediaControllerSelector$d = function mediaControllerSelector(_ref) {
  var hidden = _ref.hidden,
    togglePlay = _ref.togglePlay,
    canPlay = _ref.canPlay,
    hasPlayed = _ref.hasPlayed,
    buffered = _ref.buffered,
    ingestUrl = _ref.ingestUrl,
    _updateLastInteraction = _ref._updateLastInteraction;
  return {
    hidden: hidden,
    togglePlay: togglePlay,
    canPlay: canPlay,
    hasPlayed: hasPlayed,
    buffered: buffered,
    ingestUrl: ingestUrl,
    _updateLastInteraction: _updateLastInteraction
  };
};
var ControlsContainer = function ControlsContainer(props) {
  var top = props.top,
    middle = props.middle,
    left = props.left,
    right = props.right,
    poster = props.poster,
    _props$showLoadingSpi = props.showLoadingSpinner,
    showLoadingSpinner = _props$showLoadingSpi === void 0 ? true : _props$showLoadingSpi,
    _props$hidePosterOnPl = props.hidePosterOnPlayed,
    hidePosterOnPlayed = _props$hidePosterOnPl === void 0 ? true : _props$hidePosterOnPl,
    loadingText = props.loadingText,
    error = props.error,
    children = props.children,
    playbackFailedErrorComponent = props.playbackFailedErrorComponent,
    streamOfflineErrorComponent = props.streamOfflineErrorComponent,
    accessControlErrorComponent = props.accessControlErrorComponent;
  var _useMediaController = useMediaController(mediaControllerSelector$d),
    hidden = _useMediaController.hidden,
    togglePlay = _useMediaController.togglePlay,
    canPlay = _useMediaController.canPlay,
    hasPlayed = _useMediaController.hasPlayed,
    buffered = _useMediaController.buffered,
    ingestUrl = _useMediaController.ingestUrl,
    _updateLastInteraction = _useMediaController._updateLastInteraction;
  var isBroadcast = React.useMemo(function () {
    return Boolean(ingestUrl);
  }, [ingestUrl]);
  var _useControlsContainer = useControlsContainer({
      togglePlay: togglePlay,
      canPlay: canPlay,
      buffered: buffered,
      isBroadcast: isBroadcast,
      _updateLastInteraction: _updateLastInteraction
    }),
    isLoaded = _useControlsContainer.isLoaded,
    containerProps = _useControlsContainer.containerProps;
  return /*#__PURE__*/jsxs(Fragment, {
    children: [poster ? /*#__PURE__*/jsx("div", {
      className: styling.controlsContainer.background({
        display: hasPlayed && hidePosterOnPlayed ? 'hidden' : 'shown'
      }),
      onMouseUp: containerProps.onPress,
      children: poster
    }) : /*#__PURE__*/jsx("div", {
      className: styling.controlsContainer.background({
        display: 'hidden'
      }),
      onMouseUp: containerProps.onPress
    }), showLoadingSpinner && !isLoaded && (!(error !== null && error !== void 0 && error.type) || error.type === 'fallback') && /*#__PURE__*/jsxs("div", {
      className: styling.controlsContainer.background(),
      onMouseUp: containerProps.onPress,
      children: [loadingText && /*#__PURE__*/jsx("div", {
        className: styling.controlsContainer.loadingText(),
        children: loadingText
      }), /*#__PURE__*/jsx("div", {
        className: styling.controlsContainer.loading()
      })]
    }), error !== null && error !== void 0 && error.type && error.type !== 'fallback' ? /*#__PURE__*/jsx("div", {
      className: styling.controlsContainer.background(),
      onMouseUp: containerProps.onPress,
      children: (error === null || error === void 0 ? void 0 : error.type) === 'access-control' ? accessControlErrorComponent ? accessControlErrorComponent : /*#__PURE__*/jsx(PrivateStreamError, {}) : (error === null || error === void 0 ? void 0 : error.type) === 'offline' ? streamOfflineErrorComponent ? streamOfflineErrorComponent : /*#__PURE__*/jsx(OfflineStreamError, {
        isBroadcast: isBroadcast
      }) : playbackFailedErrorComponent ? playbackFailedErrorComponent : /*#__PURE__*/jsx(GenericError, {
        isBroadcast: isBroadcast
      })
    }) : isLoaded && /*#__PURE__*/jsxs(Fragment, {
      children: [/*#__PURE__*/jsx("div", {
        className: styling.controlsContainer.gradient({
          display: hidden ? 'hidden' : 'shown'
        }),
        onMouseUp: containerProps.onPress
      }), /*#__PURE__*/jsx("div", {
        className: styling.controlsContainer.top.container({
          display: hidden ? 'hidden' : 'shown'
        }),
        children: top
      }), /*#__PURE__*/jsxs("div", {
        className: styling.controlsContainer.bottom.container({
          display: hidden ? 'hidden' : 'shown'
        }),
        children: [/*#__PURE__*/jsx("div", {
          className: styling.controlsContainer.bottom.middle.container(),
          children: middle
        }), /*#__PURE__*/jsxs("div", {
          className: styling.controlsContainer.bottom.lower.container(),
          children: [/*#__PURE__*/jsx("div", {
            className: styling.controlsContainer.bottom.lower.left(),
            children: left
          }), /*#__PURE__*/jsx("div", {
            className: styling.controlsContainer.bottom.lower.right(),
            children: right
          })]
        })]
      }), children && /*#__PURE__*/jsx("div", {
        className: styling.controlsContainer.background({
          display: hidden ? 'hidden' : 'shown'
        }),
        children: children
      })]
    })]
  });
};

var DefaultEnterFullscreenIcon = function DefaultEnterFullscreenIcon() {
  return /*#__PURE__*/jsxs("svg", {
    width: "100%",
    height: "100%",
    viewBox: "0 0 36 36",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    children: [/*#__PURE__*/jsx("path", {
      fill: "currentColor",
      d: "m 10,16 2,0 0,-4 4,0 0,-2 L 10,10 l 0,6 0,0 z"
    }), /*#__PURE__*/jsx("path", {
      fill: "currentColor",
      d: "m 20,10 0,2 4,0 0,4 2,0 L 26,10 l -6,0 0,0 z"
    }), /*#__PURE__*/jsx("path", {
      fill: "currentColor",
      d: "m 24,24 -4,0 0,2 L 26,26 l 0,-6 -2,0 0,4 0,0 z"
    }), /*#__PURE__*/jsx("path", {
      fill: "currentColor",
      d: "M 12,20 10,20 10,26 l 6,0 0,-2 -4,0 0,-4 0,0 z"
    })]
  });
};
var DefaultExitFullscreenIcon = function DefaultExitFullscreenIcon() {
  return /*#__PURE__*/jsxs("svg", {
    width: "100%",
    height: "100%",
    viewBox: "0 0 36 36",
    xmlns: "http://www.w3.org/2000/svg",
    children: [/*#__PURE__*/jsx("path", {
      fill: "currentColor",
      d: "m 14,14 -4,0 0,2 6,0 0,-6 -2,0 0,4 0,0 z"
    }), /*#__PURE__*/jsx("path", {
      fill: "currentColor",
      d: "m 22,14 0,-4 -2,0 0,6 6,0 0,-2 -4,0 0,0 z"
    }), /*#__PURE__*/jsx("path", {
      fill: "currentColor",
      d: "m 20,26 2,0 0,-4 4,0 0,-2 -6,0 0,6 0,0 z"
    }), /*#__PURE__*/jsx("path", {
      fill: "currentColor",
      d: "m 10,22 4,0 0,4 2,0 0,-6 -6,0 0,2 0,0 z"
    })]
  });
};
var mediaControllerSelector$c = function mediaControllerSelector(_ref) {
  var fullscreen = _ref.fullscreen,
    pictureInPicture = _ref.pictureInPicture,
    requestToggleFullscreen = _ref.requestToggleFullscreen;
  return {
    fullscreen: fullscreen,
    pictureInPicture: pictureInPicture,
    requestToggleFullscreen: requestToggleFullscreen
  };
};
var FullscreenButton = function FullscreenButton(props) {
  var _useMediaController = useMediaController(mediaControllerSelector$c),
    fullscreen = _useMediaController.fullscreen,
    pictureInPicture = _useMediaController.pictureInPicture,
    requestToggleFullscreen = _useMediaController.requestToggleFullscreen;
  var _useFullscreenButton = useFullscreenButton(_objectSpread2({
      fullscreen: fullscreen,
      pictureInPicture: pictureInPicture,
      requestToggleFullscreen: requestToggleFullscreen,
      defaultEnterIcon: /*#__PURE__*/jsx(DefaultEnterFullscreenIcon, {}),
      defaultExitIcon: /*#__PURE__*/jsx(DefaultExitFullscreenIcon, {})
    }, props)),
    title = _useFullscreenButton.title,
    buttonProps = _useFullscreenButton.buttonProps;
  if (!buttonProps) {
    return /*#__PURE__*/jsx(Fragment, {});
  }
  return /*#__PURE__*/jsx("button", _objectSpread2({
    style: {
      width: props.size,
      height: props.size
    },
    className: styling.iconButton.button(),
    title: title,
    "aria-label": title,
    onClick: buttonProps.onPress
  }, omit(buttonProps, 'onPress', 'size')));
};

var _excluded = ["icon", "onPress"];
var DefaultPictureInPictureIcon = function DefaultPictureInPictureIcon() {
  return /*#__PURE__*/jsx("svg", {
    width: "100%",
    height: "100%",
    viewBox: "0 0 36 36",
    xmlns: "http://www.w3.org/2000/svg",
    children: /*#__PURE__*/jsx("path", {
      fill: "currentColor",
      d: "M25,17 L17,17 L17,23 L25,23 L25,17 L25,17 Z M29,25 L29,10.98 C29,9.88 28.1,9 27,9 L9,9 C7.9,9 7,9.88 7,10.98 L7,25 C7,26.1 7.9,27 9,27 L27,27 C28.1,27 29,26.1 29,25 L29,25 Z M27,25.02 L9,25.02 L9,10.97 L27,10.97 L27,25.02 L27,25.02 Z"
    })
  });
};
var mediaControllerSelector$b = function mediaControllerSelector(_ref) {
  var requestTogglePictureInPicture = _ref.requestTogglePictureInPicture,
    pictureInPicture = _ref.pictureInPicture,
    _element = _ref._element,
    fullscreen = _ref.fullscreen;
  return {
    requestTogglePictureInPicture: requestTogglePictureInPicture,
    pictureInPicture: pictureInPicture,
    _element: _element,
    fullscreen: fullscreen
  };
};
var PictureInPictureButton = function PictureInPictureButton(props) {
  var _useMediaController = useMediaController(mediaControllerSelector$b),
    requestTogglePictureInPicture = _useMediaController.requestTogglePictureInPicture,
    _element = _useMediaController._element,
    pictureInPicture = _useMediaController.pictureInPicture,
    fullscreen = _useMediaController.fullscreen;
  var icon = props.icon,
    onPress = props.onPress,
    rest = _objectWithoutProperties(props, _excluded);
  var onPressComposed = React.useCallback( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
    return _regeneratorRuntime().wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return onPress === null || onPress === void 0 ? void 0 : onPress();
          case 2:
            _context.next = 4;
            return requestTogglePictureInPicture();
          case 4:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  })), [onPress, requestTogglePictureInPicture]);
  var isPiPSupported = React.useMemo(function () {
    return isPictureInPictureSupported(_element);
  }, [_element]);
  var title = React.useMemo(function () {
    return pictureInPicture ? 'Exit mini player (i)' : 'Mini player (i)';
  }, [pictureInPicture]);

  // do not show button if it is not supported or if currently fullscreen
  if (!isPiPSupported || fullscreen) {
    return /*#__PURE__*/jsx(Fragment, {});
  }
  var _children = icon ? icon : /*#__PURE__*/jsx(DefaultPictureInPictureIcon, {});
  return /*#__PURE__*/jsx("button", _objectSpread2(_objectSpread2({
    style: {
      width: props.size,
      height: props.size
    },
    className: styling.iconButton.button(),
    title: title,
    "aria-label": title,
    onClick: onPressComposed
  }, rest), {}, {
    children: _children
  }));
};

var mediaControllerSelector$a = function mediaControllerSelector(_ref) {
  var duration = _ref.duration,
    progress = _ref.progress,
    live = _ref.live;
  return {
    duration: duration,
    progress: progress,
    live: live
  };
};
var TimeDisplay = function TimeDisplay() {
  var _useMediaController = useMediaController(mediaControllerSelector$a),
    duration = _useMediaController.duration,
    progress = _useMediaController.progress,
    live = _useMediaController.live;
  var _useTimeDisplay = useTimeDisplay({
      duration: duration,
      progress: progress,
      live: live
    }),
    title = _useTimeDisplay.title,
    isLive = _useTimeDisplay.live;
  return /*#__PURE__*/jsx(Fragment, {
    children: !isLive ? /*#__PURE__*/jsx("span", {
      className: styling.time.text(),
      "aria-label": 'Playback time',
      children: title
    }) : /*#__PURE__*/jsxs("div", {
      className: styling.time.container(),
      children: [/*#__PURE__*/jsx("div", {
        className: styling.time.liveIndicator()
      }), /*#__PURE__*/jsx("span", {
        className: styling.time.text(),
        "aria-label": 'Live streaming media',
        children: "LIVE"
      })]
    })
  });
};

var Title = function Title(props) {
  var content = props.content;
  return /*#__PURE__*/jsx("span", {
    className: styling.title(),
    "aria-label": 'Title',
    children: content
  });
};

var BroadcastInternal = function BroadcastInternal(props) {
  var _useBroadcast = useBroadcast(props),
    mediaElement = _useBroadcast.mediaElement,
    broadcastProps = _useBroadcast.broadcastProps,
    mediaControllerProps = _useBroadcast.mediaControllerProps,
    controlsContainerProps = _useBroadcast.controlsContainerProps,
    _useBroadcast$props = _useBroadcast.props,
    children = _useBroadcast$props.children,
    controls = _useBroadcast$props.controls,
    theme = _useBroadcast$props.theme,
    title = _useBroadcast$props.title,
    aspectRatio = _useBroadcast$props.aspectRatio,
    renderChildrenOutsideContainer = _useBroadcast$props.renderChildrenOutsideContainer;
  return /*#__PURE__*/jsxs(MediaControllerProvider, {
    element: mediaElement,
    opts: controls,
    mediaProps: mediaControllerProps,
    children: [/*#__PURE__*/jsxs(Container, {
      theme: theme,
      aspectRatio: aspectRatio,
      tabIndex: props.tabIndex,
      children: [/*#__PURE__*/jsx(WebRTCBroadcast, _objectSpread2({}, broadcastProps)), !renderChildrenOutsideContainer && /*#__PURE__*/React.isValidElement(children) ? /*#__PURE__*/React.cloneElement(children, controlsContainerProps) : /*#__PURE__*/jsx(ControlsContainer, _objectSpread2(_objectSpread2({}, controlsContainerProps), {}, {
        top: /*#__PURE__*/jsx(Fragment, {
          children: title && /*#__PURE__*/jsx(Title, {
            content: title
          })
        }),
        left: /*#__PURE__*/jsxs(Fragment, {
          children: [/*#__PURE__*/jsx(VideoToggle, {}), /*#__PURE__*/jsx(AudioToggle, {}), /*#__PURE__*/jsx(Screenshare, {
            options: props === null || props === void 0 ? void 0 : props.displayMediaOptions
          }), /*#__PURE__*/jsx(TimeDisplay, {})]
        }),
        right: /*#__PURE__*/jsxs(Fragment, {
          children: [props.showPipButton && /*#__PURE__*/jsx(PictureInPictureButton, {}), /*#__PURE__*/jsx(BroadcastSettings, {
            streamConstraints: props.mediaStreamConstraints
          }), /*#__PURE__*/jsx(FullscreenButton, {})]
        })
      }))]
    }), renderChildrenOutsideContainer && /*#__PURE__*/React.isValidElement(children) ? children : /*#__PURE__*/jsx(Fragment, {})]
  });
};
var typedMemo$1 = React.memo;
var Broadcast = typedMemo$1(BroadcastInternal);

var mediaControllerSelector$9 = function mediaControllerSelector(_ref) {
  var fullscreen = _ref.fullscreen;
  return {
    fullscreen: fullscreen
  };
};
var AudioPlayer = /*#__PURE__*/React.forwardRef(function (_ref2, ref) {
  var src = _ref2.src,
    autoPlay = _ref2.autoPlay,
    title = _ref2.title,
    loop = _ref2.loop,
    muted = _ref2.muted,
    objectFit = _ref2.objectFit,
    allowCrossOriginCredentials = _ref2.allowCrossOriginCredentials;
  var _useMediaController = useMediaController(mediaControllerSelector$9),
    fullscreen = _useMediaController.fullscreen;
  var filteredSources = React.useMemo(function () {
    var _src$filter;
    return (_src$filter = src === null || src === void 0 ? void 0 : src.filter(function (s) {
      return (s === null || s === void 0 ? void 0 : s.mime) && canPlayMediaNatively(s);
    })) !== null && _src$filter !== void 0 ? _src$filter : [];
  }, [src]);
  return /*#__PURE__*/jsxs("audio", {
    className: styling.media.audio({
      size: fullscreen ? 'fullscreen' : objectFit
    }),
    loop: loop,
    "aria-label": title !== null && title !== void 0 ? title : 'Audio player',
    role: "audio",
    autoPlay: autoPlay,
    ref: ref,
    "webkit-playsinline": "true",
    playsInline: true,
    muted: muted,
    crossOrigin: allowCrossOriginCredentials ? 'use-credentials' : 'anonymous',
    children: [filteredSources.map(function (source) {
      return /*#__PURE__*/jsx("source", {
        src: source.src,
        type: source.mime
      }, source.src);
    }), "Your browser doesn't support the HTML5 <code>audio</code> tag, or the audio format."]
  });
});
AudioPlayer.displayName = 'AudioPlayer';

var DefaultClipIcon = function DefaultClipIcon() {
  return /*#__PURE__*/jsx("svg", {
    width: "100%",
    height: "100%",
    viewBox: "-6 -6 36 36",
    focusable: "false",
    children: /*#__PURE__*/jsx("path", {
      fill: "currentColor",
      d: "M8 7c0 .55-.45 1-1 1s-1-.45-1-1 .45-1 1-1 1 .45 1 1zm-1 9c-.55 0-1 .45-1 1s.45 1 1 1 1-.45 1-1-.45-1-1-1zm3.79-7.77L21 18.44V20h-3.27l-5.76-5.76-1.27 1.27c.19.46.3.96.3 1.49 0 2.21-1.79 4-4 4s-4-1.79-4-4 1.79-4 4-4c.42 0 .81.08 1.19.2l1.37-1.37-1.11-1.11C8 10.89 7.51 11 7 11c-2.21 0-4-1.79-4-4s1.79-4 4-4 4 1.79 4 4c0 .43-.09.84-.21 1.23zm-.71.71-.43-.44.19-.58c.11-.34.16-.64.16-.92 0-1.65-1.35-3-3-3S4 5.35 4 7s1.35 3 3 3c.36 0 .73-.07 1.09-.21l.61-.24.46.46 1.11 1.11.71.71-.71.71-1.37 1.37-.43.43-.58-.18C7.55 14.05 7.27 14 7 14c-1.65 0-3 1.35-3 3s1.35 3 3 3 3-1.35 3-3c0-.38-.07-.75-.22-1.12l-.25-.61.47-.47 1.27-1.27.71-.71.71.71L18.15 19H20v-.15l-9.92-9.91zM17.73 4H21v1.56l-5.52 5.52-2.41-2.41L17.73 4zm.42 1-3.67 3.67 1 1L20 5.15V5h-1.85z"
    })
  });
};
var mediaControllerSelector$8 = function mediaControllerSelector(_ref) {
  var live = _ref.live,
    requestClip = _ref.requestClip,
    playbackId = _ref.playbackId,
    clipStatus = _ref.clipStatus;
  return {
    live: live,
    requestClip: requestClip,
    playbackId: playbackId,
    clipStatus: clipStatus
  };
};
var ClipButton = function ClipButton(props) {
  var _useMediaController = useMediaController(mediaControllerSelector$8),
    live = _useMediaController.live,
    requestClip = _useMediaController.requestClip,
    playbackId = _useMediaController.playbackId,
    clipStatus = _useMediaController.clipStatus;
  var _useClipButton = useClipButton(_objectSpread2({
      live: live,
      requestClip: requestClip,
      playbackId: playbackId,
      clipStatus: clipStatus,
      defaultIcon: /*#__PURE__*/jsx(DefaultClipIcon, {})
    }, props)),
    buttonProps = _useClipButton.buttonProps,
    title = _useClipButton.title,
    isShown = _useClipButton.isShown,
    status = _useClipButton.status;
  return isShown ? /*#__PURE__*/jsx("button", _objectSpread2({
    style: {
      width: props.size,
      height: props.size
    },
    className: styling.iconButton.button(),
    title: title,
    "aria-label": title,
    disabled: status === 'loading',
    onClick: buttonProps.onPress
  }, omit(buttonProps, 'onPress', 'size'))) : /*#__PURE__*/jsx(Fragment, {});
};

var DefaultPlayIcon = function DefaultPlayIcon() {
  return /*#__PURE__*/jsx("svg", {
    width: "100%",
    height: "100%",
    viewBox: "0 0 36 36",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    children: /*#__PURE__*/jsx("path", {
      d: "M 12,26 18.5,22 18.5,14 12,10 z M 18.5,22 25,18 25,18 18.5,14 z",
      fill: "currentColor"
    })
  });
};
var DefaultPauseIcon = function DefaultPauseIcon() {
  return /*#__PURE__*/jsx("svg", {
    width: "100%",
    height: "100%",
    viewBox: "0 0 36 36",
    fill: "none",
    children: /*#__PURE__*/jsx("path", {
      d: "M 12,26 16,26 16,10 12,10 z M 21,26 25,26 25,10 21,10 z",
      fill: "currentColor"
    })
  });
};
var mediaControllerSelector$7 = function mediaControllerSelector(_ref) {
  var togglePlay = _ref.togglePlay,
    playing = _ref.playing;
  return {
    togglePlay: togglePlay,
    playing: playing
  };
};
var PlayButton = function PlayButton(props) {
  var _useMediaController = useMediaController(mediaControllerSelector$7),
    togglePlay = _useMediaController.togglePlay,
    playing = _useMediaController.playing;
  var _usePlayButton = usePlayButton(_objectSpread2({
      togglePlay: togglePlay,
      playing: playing,
      defaultPauseIcon: /*#__PURE__*/jsx(DefaultPauseIcon, {}),
      defaultPlayIcon: /*#__PURE__*/jsx(DefaultPlayIcon, {})
    }, props)),
    buttonProps = _usePlayButton.buttonProps,
    title = _usePlayButton.title;
  return /*#__PURE__*/jsx("button", _objectSpread2({
    style: {
      width: props.size,
      height: props.size
    },
    className: styling.iconButton.button(),
    title: title,
    "aria-label": title,
    onClick: buttonProps.onPress
  }, omit(buttonProps, 'onPress', 'size')));
};

var mediaControllerSelector$6 = function mediaControllerSelector(_ref) {
  var fullscreen = _ref.fullscreen;
  return {
    fullscreen: fullscreen
  };
};
var Poster = function Poster(props) {
  var _useMediaController = useMediaController(mediaControllerSelector$6),
    fullscreen = _useMediaController.fullscreen;
  var content = props.content,
    title = props.title;
  return typeof content === 'string' ? /*#__PURE__*/jsx("img", {
    className: styling.media.poster({
      size: fullscreen ? 'fullscreen' : 'default'
    }),
    "aria-label": title,
    alt: title,
    src: content
  }) : /*#__PURE__*/React.isValidElement(content) ? /*#__PURE__*/React.cloneElement(content, {
    className: styling.media.poster({
      size: fullscreen ? 'fullscreen' : 'default'
    })
  }) : /*#__PURE__*/jsx(Fragment, {});
};

var mediaControllerSelector$5 = function mediaControllerSelector(_ref) {
  var duration = _ref.duration,
    progress = _ref.progress,
    requestSeek = _ref.requestSeek,
    buffered = _ref.buffered,
    live = _ref.live;
  return {
    duration: duration,
    progress: progress,
    requestSeek: requestSeek,
    buffered: buffered,
    live: live
  };
};
var Progress = function Progress(props) {
  var _useMediaController = useMediaController(mediaControllerSelector$5),
    duration = _useMediaController.duration,
    progress = _useMediaController.progress,
    requestSeek = _useMediaController.requestSeek,
    buffered = _useMediaController.buffered,
    live = _useMediaController.live;
  var _useProgress = useProgress(_objectSpread2({
      duration: duration,
      progress: progress,
      requestSeek: requestSeek,
      buffered: buffered,
      live: live
    }, props)),
    isVisible = _useProgress.isVisible,
    progressProps = _useProgress.progressProps,
    title = _useProgress.title;
  return isVisible ? /*#__PURE__*/jsx(BaseSlider, _objectSpread2(_objectSpread2({}, progressProps), {}, {
    ariaName: title
  })) : /*#__PURE__*/jsx(Fragment, {});
};

var DefaultMutedIcon = function DefaultMutedIcon() {
  return /*#__PURE__*/jsxs("svg", {
    width: "100%",
    height: "100%",
    viewBox: "0 0 36 36",
    children: [/*#__PURE__*/jsx("path", {
      d: "M 9.25,9 7.98,10.27 24.71,27 l 1.27,-1.27 Z",
      fill: "currentColor"
    }), /*#__PURE__*/jsx("path", {
      fill: "currentColor",
      d: "M8,21 L12,21 L17,26 L17,10 L12,15 L8,15 L8,21 Z M19,14 L19,22 C20.48,21.32 21.5,19.77 21.5,18 C21.5,16.26 20.48,14.74 19,14 ZM19,11.29 C21.89,12.15 24,14.83 24,18 C24,21.17 21.89,23.85 19,24.71 L19,26.77 C23.01,25.86 26,22.28 26,18 C26,13.72 23.01,10.14 19,9.23 L19,11.29 Z"
    })]
  });
};
var DefaultUnmutedIcon = function DefaultUnmutedIcon() {
  return /*#__PURE__*/jsx("svg", {
    width: "100%",
    height: "100%",
    viewBox: "0 0 36 36",
    children: /*#__PURE__*/jsx("path", {
      fill: "currentColor",
      d: "M8,21 L12,21 L17,26 L17,10 L12,15 L8,15 L8,21 Z M19,14 L19,22 C20.48,21.32 21.5,19.77 21.5,18 C21.5,16.26 20.48,14.74 19,14 ZM19,11.29 C21.89,12.15 24,14.83 24,18 C24,21.17 21.89,23.85 19,24.71 L19,26.77 C23.01,25.86 26,22.28 26,18 C26,13.72 23.01,10.14 19,9.23 L19,11.29 Z"
    })
  });
};
var mediaControllerSelector$4 = function mediaControllerSelector(_ref) {
  var isVolumeChangeSupported = _ref.isVolumeChangeSupported,
    requestToggleMute = _ref.requestToggleMute,
    requestVolume = _ref.requestVolume,
    muted = _ref.muted,
    volume = _ref.volume;
  return {
    isVolumeChangeSupported: isVolumeChangeSupported,
    requestToggleMute: requestToggleMute,
    requestVolume: requestVolume,
    muted: muted,
    volume: volume
  };
};
var Volume = function Volume(props) {
  var _useMediaController = useMediaController(mediaControllerSelector$4),
    volume = _useMediaController.volume,
    requestToggleMute = _useMediaController.requestToggleMute,
    muted = _useMediaController.muted,
    requestVolume = _useMediaController.requestVolume,
    isVolumeChangeSupported = _useMediaController.isVolumeChangeSupported;
  var _useVolume = useVolume(_objectSpread2({
      volume: volume,
      requestToggleMute: requestToggleMute,
      muted: muted,
      requestVolume: requestVolume,
      isVolumeChangeSupported: isVolumeChangeSupported,
      defaultMutedIcon: /*#__PURE__*/jsx(DefaultMutedIcon, {}),
      defaultUnmutedIcon: /*#__PURE__*/jsx(DefaultUnmutedIcon, {})
    }, props)),
    progressProps = _useVolume.progressProps,
    buttonProps = _useVolume.buttonProps,
    title = _useVolume.title;
  return /*#__PURE__*/jsxs("div", {
    className: styling.volume.container(),
    children: [/*#__PURE__*/jsx("button", _objectSpread2({
      style: {
        width: props.size,
        height: props.size
      },
      className: styling.iconButton.button(),
      title: title,
      "aria-label": title,
      onClick: buttonProps.onPress
    }, omit(buttonProps, 'onPress', 'size'))), progressProps.shown && /*#__PURE__*/jsx(BaseSlider, _objectSpread2({
      ariaName: "volume",
      value: muted ? 0 : volume
    }, progressProps))]
  });
};

var useDebounce = function useDebounce(value, delay) {
  var _React$useState = React.useState(value),
    _React$useState2 = _slicedToArray(_React$useState, 2),
    debouncedValue = _React$useState2[0],
    setDebouncedValue = _React$useState2[1];
  React.useEffect(function () {
    // add delay with jitter
    var handler = setTimeout(function () {
      setDebouncedValue(value);
    }, delay + 1000 * Math.random());
    return function () {
      clearTimeout(handler);
    };
  }, [value, delay]);
  return debouncedValue;
};

var mediaControllerSelector$3 = function mediaControllerSelector(_ref) {
  var live = _ref.live,
    setLive = _ref.setLive,
    onDurationChange = _ref.onDurationChange,
    onCanPlay = _ref.onCanPlay,
    _element = _ref._element,
    _updatePlaybackOffsetMs = _ref._updatePlaybackOffsetMs,
    onRedirect = _ref.onRedirect;
  return {
    live: live,
    setLive: setLive,
    onDurationChange: onDurationChange,
    onCanPlay: onCanPlay,
    _element: _element,
    _updatePlaybackOffsetMs: _updatePlaybackOffsetMs,
    onRedirect: onRedirect
  };
};
var indexUrl = /\/hls\/[^/\s]+\/index\.m3u8/;
var HLSVideoPlayer = /*#__PURE__*/React.forwardRef(function (props, ref) {
  var src = props.src,
    hlsConfig = props.hlsConfig,
    autoPlay = props.autoPlay,
    title = props.title,
    loop = props.loop,
    muted = props.muted,
    poster = props.poster,
    objectFit = props.objectFit,
    fullscreen = props.fullscreen,
    onPlaybackError = props.onPlaybackError,
    priority = props.priority,
    allowCrossOriginCredentials = props.allowCrossOriginCredentials,
    playRecording = props.playRecording,
    jwt = props.jwt,
    accessKey = props.accessKey;
  var _useMediaController = useMediaController(mediaControllerSelector$3),
    live = _useMediaController.live,
    setLive = _useMediaController.setLive,
    onCanPlay = _useMediaController.onCanPlay,
    onDurationChange = _useMediaController.onDurationChange,
    _element = _useMediaController._element,
    _updatePlaybackOffsetMs = _useMediaController._updatePlaybackOffsetMs,
    onRedirect = _useMediaController.onRedirect;
  var onLive = React.useCallback( /*#__PURE__*/function () {
    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(live) {
      return _regeneratorRuntime().wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              onPlaybackError === null || onPlaybackError === void 0 ? void 0 : onPlaybackError(null);
              if (!playRecording) {
                setLive(live);
              }
            case 2:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));
    return function (_x) {
      return _ref2.apply(this, arguments);
    };
  }(), [onPlaybackError, setLive, playRecording]);
  var _React$useState = React.useState(0),
    _React$useState2 = _slicedToArray(_React$useState, 2),
    errorCount = _React$useState2[0],
    setErrorCount = _React$useState2[1];
  var debouncedErrorCount = useDebounce(errorCount, 1000 * errorCount);
  React.useEffect(function () {
    if (_element && src) {
      var onErrorComposed = function onErrorComposed(error) {
        var _error$response$data$, _error$response, _error$response$data, _error$response$data$2, _error$response2;
        setErrorCount(function (prev) {
          return prev + 1;
        });
        var cleanError = new Error((_error$response$data$ = error === null || error === void 0 ? void 0 : (_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : (_error$response$data$2 = _error$response$data.toString) === null || _error$response$data$2 === void 0 ? void 0 : _error$response$data$2.call(_error$response$data)) !== null && _error$response$data$ !== void 0 ? _error$response$data$ : (error === null || error === void 0 ? void 0 : (_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.code) === 401 ? ACCESS_CONTROL_ERROR_MESSAGE : 'Error with HLS.js');
        onPlaybackError === null || onPlaybackError === void 0 ? void 0 : onPlaybackError(cleanError);
      };
      var _createNewHls = createNewHls(src === null || src === void 0 ? void 0 : src.src, _element, {
          onLive: onLive,
          onDuration: onDurationChange,
          onCanPlay: onCanPlay,
          onError: onErrorComposed,
          onPlaybackOffsetUpdated: _updatePlaybackOffsetMs,
          onRedirect: onRedirect
        }, _objectSpread2({
          autoplay: autoPlay,
          xhrSetup: function xhrSetup(xhr, url) {
            xhr.withCredentials = Boolean(allowCrossOriginCredentials);
            if (!live || url.match(indexUrl)) {
              if (accessKey) xhr.setRequestHeader('Livepeer-Access-Key', accessKey);else if (jwt) xhr.setRequestHeader('Livepeer-Jwt', jwt);
            }
          }
        }, hlsConfig)),
        destroy = _createNewHls.destroy;
      return function () {
        destroy === null || destroy === void 0 ? void 0 : destroy();
      };
    }
  }, [live, autoPlay, hlsConfig, onDurationChange, onCanPlay, _element, src, onLive, onPlaybackError, allowCrossOriginCredentials, debouncedErrorCount, _updatePlaybackOffsetMs, onRedirect, jwt, accessKey]);
  return /*#__PURE__*/jsx("video", {
    className: styling.media.video({
      size: fullscreen ? 'fullscreen' : objectFit
    }),
    loop: loop,
    "aria-label": title !== null && title !== void 0 ? title : 'Video player',
    role: "video",
    width: "100%",
    height: "100%",
    ref: ref,
    "webkit-playsinline": "true",
    playsInline: true,
    autoPlay: autoPlay,
    muted: muted,
    poster: typeof poster === 'string' ? poster : undefined,
    preload: priority ? 'auto' : 'metadata',
    crossOrigin: allowCrossOriginCredentials ? 'use-credentials' : 'anonymous'
  });
});

var mediaControllerSelector$2 = function mediaControllerSelector(_ref) {
  var canPlay = _ref.canPlay,
    onRedirect = _ref.onRedirect;
  return {
    canPlay: canPlay,
    onRedirect: onRedirect
  };
};
var HtmlVideoPlayer = /*#__PURE__*/React.forwardRef(function (props, ref) {
  var _src$src;
  var autoPlay = props.autoPlay,
    title = props.title,
    loop = props.loop,
    muted = props.muted,
    poster = props.poster,
    objectFit = props.objectFit,
    priority = props.priority,
    onPlaybackError = props.onPlaybackError,
    src = props.src,
    fullscreen = props.fullscreen;
  var _useMediaController = useMediaController(mediaControllerSelector$2),
    canPlay = _useMediaController.canPlay,
    onRedirect = _useMediaController.onRedirect;
  var onVideoError = React.useCallback( /*#__PURE__*/function () {
    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(e) {
      var _currentSrc;
      var sourceElement, parentElement, videoUrl, response;
      return _regeneratorRuntime().wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              sourceElement = e.target;
              parentElement = sourceElement === null || sourceElement === void 0 ? void 0 : sourceElement.parentElement;
              videoUrl = (_currentSrc = parentElement === null || parentElement === void 0 ? void 0 : parentElement.currentSrc) !== null && _currentSrc !== void 0 ? _currentSrc : sourceElement === null || sourceElement === void 0 ? void 0 : sourceElement.currentSrc;
              if (!videoUrl) {
                _context.next = 22;
                break;
              }
              _context.prev = 4;
              _context.next = 7;
              return fetch(videoUrl);
            case 7:
              response = _context.sent;
              if (!(response.status === 404)) {
                _context.next = 13;
                break;
              }
              console.warn('Video not found');
              return _context.abrupt("return", onPlaybackError === null || onPlaybackError === void 0 ? void 0 : onPlaybackError(new Error(STREAM_OFFLINE_ERROR_MESSAGE)));
            case 13:
              if (!(response.status === 401)) {
                _context.next = 16;
                break;
              }
              console.warn('Unauthorized to view video');
              return _context.abrupt("return", onPlaybackError === null || onPlaybackError === void 0 ? void 0 : onPlaybackError(new Error(ACCESS_CONTROL_ERROR_MESSAGE)));
            case 16:
              _context.next = 22;
              break;
            case 18:
              _context.prev = 18;
              _context.t0 = _context["catch"](4);
              console.warn(_context.t0);
              return _context.abrupt("return", onPlaybackError === null || onPlaybackError === void 0 ? void 0 : onPlaybackError(new Error('Error fetching video URL')));
            case 22:
              console.warn('Unknown error loading video');
              return _context.abrupt("return", onPlaybackError === null || onPlaybackError === void 0 ? void 0 : onPlaybackError(new Error('Unknown error loading video')));
            case 24:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, null, [[4, 18]]);
    }));
    return function (_x) {
      return _ref2.apply(this, arguments);
    };
  }(), [onPlaybackError]);
  React.useEffect(function () {
    if (canPlay) {
      onPlaybackError === null || onPlaybackError === void 0 ? void 0 : onPlaybackError(null);
    }
  }, [canPlay, onPlaybackError]);
  React.useEffect(function () {
    if (src !== null && src !== void 0 && src.src) {
      onRedirect === null || onRedirect === void 0 ? void 0 : onRedirect(src === null || src === void 0 ? void 0 : src.src);
    }
  }, [src, onRedirect]);
  return /*#__PURE__*/jsx("video", {
    className: styling.media.video({
      size: fullscreen ? 'fullscreen' : objectFit
    }),
    loop: loop,
    "aria-label": title !== null && title !== void 0 ? title : 'Video player',
    role: "video",
    autoPlay: autoPlay,
    width: "100%",
    height: "100%",
    ref: ref,
    "webkit-playsinline": "true",
    playsInline: true,
    muted: muted,
    poster: typeof poster === 'string' ? poster : undefined,
    onError: onVideoError,
    preload: priority ? 'auto' : 'metadata',
    src: (_src$src = src === null || src === void 0 ? void 0 : src.src) !== null && _src$src !== void 0 ? _src$src : undefined,
    children: "Your browser doesn't support the HTML5 <code>video</code> tag, or the video format."
  });
});
HtmlVideoPlayer.displayName = 'HtmlVideoPlayer';

var mediaControllerSelector$1 = function mediaControllerSelector(_ref) {
  var metadata = _ref.metadata,
    _element = _ref._element,
    setLive = _ref.setLive,
    _updatePlaybackOffsetMs = _ref._updatePlaybackOffsetMs,
    onRedirect = _ref.onRedirect;
  return {
    metadata: metadata,
    _element: _element,
    setLive: setLive,
    _updatePlaybackOffsetMs: _updatePlaybackOffsetMs,
    onRedirect: onRedirect
  };
};
var WebRTCVideoPlayer = /*#__PURE__*/React.forwardRef(function (props, ref) {
  var src = props.src,
    autoPlay = props.autoPlay,
    title = props.title,
    loop = props.loop,
    muted = props.muted,
    poster = props.poster,
    objectFit = props.objectFit,
    fullscreen = props.fullscreen,
    onPlaybackError = props.onPlaybackError,
    priority = props.priority,
    webrtcConfig = props.webrtcConfig,
    jwt = props.jwt,
    accessKey = props.accessKey;
  var _useMediaController = useMediaController(mediaControllerSelector$1),
    metadata = _useMediaController.metadata,
    _element = _useMediaController._element,
    setLive = _useMediaController.setLive,
    _updatePlaybackOffsetMs = _useMediaController._updatePlaybackOffsetMs,
    onRedirect = _useMediaController.onRedirect;
  var onConnected = React.useCallback( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
    return _regeneratorRuntime().wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            onPlaybackError === null || onPlaybackError === void 0 ? void 0 : onPlaybackError(null);
            setLive(true);
          case 2:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  })), [onPlaybackError, setLive]);
  React.useEffect(function () {
    if (metadata !== null && metadata !== void 0 && metadata.bframes) {
      onPlaybackError(new Error(BFRAMES_ERROR_MESSAGE));
    }
  }, [metadata, onPlaybackError]);
  var _React$useState = React.useState(0),
    _React$useState2 = _slicedToArray(_React$useState, 2),
    errorCount = _React$useState2[0],
    setErrorCount = _React$useState2[1];
  var debouncedErrorCount = useDebounce(errorCount, 1000 * errorCount);
  React.useEffect(function () {
    if (_element && src.src) {
      var mounted = true;
      var onErrorComposed = function onErrorComposed(error) {
        if (mounted) {
          var _error$message$toStri, _error$message, _error$message$toStri2;
          setErrorCount(function (prev) {
            return prev + 1;
          });
          var cleanError = new Error((_error$message$toStri = error === null || error === void 0 ? void 0 : (_error$message = error.message) === null || _error$message === void 0 ? void 0 : (_error$message$toStri2 = _error$message.toString) === null || _error$message$toStri2 === void 0 ? void 0 : _error$message$toStri2.call(_error$message)) !== null && _error$message$toStri !== void 0 ? _error$message$toStri : 'Error with WebRTC');
          onPlaybackError === null || onPlaybackError === void 0 ? void 0 : onPlaybackError(cleanError);
        }
      };
      var _createNewWHEP = createNewWHEP(src === null || src === void 0 ? void 0 : src.src, _element, {
          onConnected: onConnected,
          onError: onErrorComposed,
          onPlaybackOffsetUpdated: _updatePlaybackOffsetMs,
          onRedirect: onRedirect
        }, webrtcConfig, {
          jwt: jwt,
          accessKey: accessKey
        }),
        destroy = _createNewWHEP.destroy;
      return function () {
        mounted = false;
        destroy === null || destroy === void 0 ? void 0 : destroy();
      };
    }
  }, [webrtcConfig, _element, onConnected, src, onPlaybackError, debouncedErrorCount, _updatePlaybackOffsetMs, onRedirect, jwt, accessKey]);
  return /*#__PURE__*/jsx("video", {
    className: styling.media.video({
      size: fullscreen ? 'fullscreen' : objectFit
    }),
    loop: loop,
    "aria-label": title !== null && title !== void 0 ? title : 'Video player',
    role: "video",
    width: "100%",
    height: "100%",
    ref: ref,
    "webkit-playsinline": "true",
    playsInline: true,
    autoPlay: autoPlay,
    muted: muted,
    poster: typeof poster === 'string' ? poster : undefined,
    preload: priority ? 'auto' : 'metadata'
  });
});

var mediaControllerSelector = function mediaControllerSelector(_ref) {
  var fullscreen = _ref.fullscreen,
    setPlaybackError = _ref.setPlaybackError;
  return {
    fullscreen: fullscreen,
    setPlaybackError: setPlaybackError
  };
};
function debounce(fn, delay) {
  var timeoutId = null;
  var debouncedFn = function debouncedFn() {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    if (timeoutId === null) {
      timeoutId = setTimeout(function () {
        timeoutId = null;
        fn.apply(void 0, args);
      }, delay);
    }
  };
  var cancel = function cancel() {
    if (timeoutId) {
      clearTimeout(timeoutId);
      timeoutId = null;
    }
  };
  return {
    debouncedFn: debouncedFn,
    cancel: cancel
  };
}
var InternalVideoPlayer = /*#__PURE__*/React.forwardRef(function (props, ref) {
  var _useMediaController = useMediaController(mediaControllerSelector),
    fullscreen = _useMediaController.fullscreen,
    setPlaybackError = _useMediaController.setPlaybackError;
  var src = props.src,
    onPlaybackError = props.onPlaybackError,
    playbackError = props.playbackError,
    _props$lowLatency = props.lowLatency,
    lowLatency = _props$lowLatency === void 0 ? true : _props$lowLatency,
    onPlaybackStatusUpdate = props.onPlaybackStatusUpdate,
    playbackStatusSelector = props.playbackStatusSelector,
    webrtcConfig = props.webrtcConfig;
  var _React$useMemo = React.useMemo(function () {
      return [isHlsSupported(), isWebRTCSupported()];
    }, []),
    _React$useMemo2 = _slicedToArray(_React$useMemo, 2),
    canUseHlsjs = _React$useMemo2[0],
    canUseWebRTC = _React$useMemo2[1];

  // we map the HLS sources to be a "video" source instead, if HLS.js is not supported
  var playbackMappedSources = React.useMemo(function () {
    var _src$filter;
    return src === null || src === void 0 ? void 0 : (_src$filter = src.filter(function (s) {
      return lowLatency === 'force' && src !== null && src !== void 0 && src.some(function (s) {
        return (s === null || s === void 0 ? void 0 : s.type) === 'webrtc';
      }) ? s.type === 'webrtc' : lowLatency ? true : s.type !== 'webrtc';
    })) === null || _src$filter === void 0 ? void 0 : _src$filter.map(function (s) {
      var url = new URL(s.src);

      // append the JWT to the query params
      if (props.jwt) {
        url.searchParams.append('jwt', props.jwt);
      }
      // append the access key to the query params
      else if (props.accessKey) {
        url.searchParams.append('accessKey', props.accessKey);
      }
      return s.type === 'hls' && !canUseHlsjs ? _objectSpread2(_objectSpread2({}, s), {}, {
        src: url.toString(),
        type: 'video',
        mime: 'application/vnd.apple.mpegurl'
      }) : s;
    });
  }, [src, canUseHlsjs, props.jwt, props.accessKey, lowLatency]);
  var _React$useState = React.useState(0),
    _React$useState2 = _slicedToArray(_React$useState, 2),
    currentSourceIndex = _React$useState2[0],
    setCurrentSourceIndex = _React$useState2[1];
  var incrementSourceIndex = React.useCallback(function () {
    setCurrentSourceIndex(function (prev) {
      return prev + 1;
    });
  }, [setCurrentSourceIndex]);

  // update the debounced function when currentSourceIndex changes
  var _React$useMemo3 = React.useMemo(function () {
      return debounce(incrementSourceIndex, 500 * currentSourceIndex);
    }, [incrementSourceIndex, currentSourceIndex]),
    debouncedIncrementSourceIndex = _React$useMemo3.debouncedFn,
    cancel = _React$useMemo3.cancel;

  // Store the debounced function and cancel method in refs
  var debouncedIncrementSourceIndexRef = React.useRef(debouncedIncrementSourceIndex);
  var cancelRef = React.useRef(cancel);
  React.useEffect(function () {
    debouncedIncrementSourceIndexRef.current = debouncedIncrementSourceIndex;
    cancelRef.current = cancel;
  }, [debouncedIncrementSourceIndex, cancel]);
  var currentPlaybackSource = React.useMemo(
  // use modulo to limit it to the source array's length
  function () {
    var _playbackMappedSource, _playbackMappedSource2;
    return (_playbackMappedSource = playbackMappedSources === null || playbackMappedSources === void 0 ? void 0 : playbackMappedSources[currentSourceIndex % ((_playbackMappedSource2 = playbackMappedSources === null || playbackMappedSources === void 0 ? void 0 : playbackMappedSources.length) !== null && _playbackMappedSource2 !== void 0 ? _playbackMappedSource2 : 0)]) !== null && _playbackMappedSource !== void 0 ? _playbackMappedSource : null;
  }, [playbackMappedSources, currentSourceIndex]);

  // we increment the source on a bframes or  unknown error
  // and we clear the timeout if we have a null playbackError
  React.useEffect(function () {
    if ((playbackError === null || playbackError === void 0 ? void 0 : playbackError.type) === 'fallback' || (playbackError === null || playbackError === void 0 ? void 0 : playbackError.type) === 'unknown') {
      var _debouncedIncrementSo;
      debouncedIncrementSourceIndexRef === null || debouncedIncrementSourceIndexRef === void 0 ? void 0 : (_debouncedIncrementSo = debouncedIncrementSourceIndexRef.current) === null || _debouncedIncrementSo === void 0 ? void 0 : _debouncedIncrementSo.call(debouncedIncrementSourceIndexRef);
    } else if (playbackError === null) {
      var _cancelRef$current;
      cancelRef === null || cancelRef === void 0 ? void 0 : (_cancelRef$current = cancelRef.current) === null || _cancelRef$current === void 0 ? void 0 : _cancelRef$current.call(cancelRef);
    }
    setPlaybackError(playbackError);
  }, [playbackError, setPlaybackError]);

  // we auto-increment the index of the playback source if it can't be handled
  React.useEffect(function () {
    var shouldTryNextSource = (currentPlaybackSource === null || currentPlaybackSource === void 0 ? void 0 : currentPlaybackSource.type) === 'webrtc' && !canUseWebRTC || (currentPlaybackSource === null || currentPlaybackSource === void 0 ? void 0 : currentPlaybackSource.type) === 'hls' && !canUseHlsjs || (currentPlaybackSource === null || currentPlaybackSource === void 0 ? void 0 : currentPlaybackSource.type) === 'video' && !canPlayMediaNatively(currentPlaybackSource);
    if (shouldTryNextSource) {
      var _debouncedIncrementSo2;
      debouncedIncrementSourceIndexRef === null || debouncedIncrementSourceIndexRef === void 0 ? void 0 : (_debouncedIncrementSo2 = debouncedIncrementSourceIndexRef.current) === null || _debouncedIncrementSo2 === void 0 ? void 0 : _debouncedIncrementSo2.call(debouncedIncrementSourceIndexRef);
    }
  }, [canUseHlsjs, canUseWebRTC, currentPlaybackSource]);
  var store = React.useContext(MediaControllerContext);
  var stateSelector = React.useCallback(function (state) {
    return playbackStatusSelector ? playbackStatusSelector(state) : state;
  }, [playbackStatusSelector]);
  React.useEffect(function () {
    return store.subscribe(stateSelector, function (state, prevState) {
      return onPlaybackStatusUpdate === null || onPlaybackStatusUpdate === void 0 ? void 0 : onPlaybackStatusUpdate(sanitizeMediaControllerState$1(state), sanitizeMediaControllerState$1(prevState));
    });
  }, [onPlaybackStatusUpdate, stateSelector, store]);
  React.useEffect(function () {
    if (currentPlaybackSource) {
      var _store$getState, _store$getState$call, _store$getState$call$;
      store === null || store === void 0 ? void 0 : (_store$getState = store.getState) === null || _store$getState === void 0 ? void 0 : (_store$getState$call = _store$getState.call(store)) === null || _store$getState$call === void 0 ? void 0 : (_store$getState$call$ = _store$getState$call._updateSource) === null || _store$getState$call$ === void 0 ? void 0 : _store$getState$call$.call(_store$getState$call, currentPlaybackSource === null || currentPlaybackSource === void 0 ? void 0 : currentPlaybackSource.src);
    }
  }, [store, currentPlaybackSource]);
  React.useEffect(function () {
    if (!playbackError && (currentPlaybackSource === null || currentPlaybackSource === void 0 ? void 0 : currentPlaybackSource.type) === 'webrtc') {
      var _webrtcConfig$canPlay;
      var id = setTimeout(function () {
        if (!store.getState().canPlay) {
          onPlaybackError(new Error('Timeout reached for canPlay - triggering playback error.'));
        }
      }, (_webrtcConfig$canPlay = webrtcConfig === null || webrtcConfig === void 0 ? void 0 : webrtcConfig.canPlayTimeout) !== null && _webrtcConfig$canPlay !== void 0 ? _webrtcConfig$canPlay : 7000);
      return function () {
        clearTimeout(id);
      };
    }
  }, [store, playbackError, onPlaybackError, webrtcConfig === null || webrtcConfig === void 0 ? void 0 : webrtcConfig.canPlayTimeout, currentPlaybackSource]);
  React.useEffect(function () {
    var _addMediaMetricsToSto = addMediaMetricsToStore(store, function (e) {
        onPlaybackError === null || onPlaybackError === void 0 ? void 0 : onPlaybackError(e);
        console.error('Not able to report player metrics', e);
      }),
      destroy = _addMediaMetricsToSto.destroy;
    return destroy;
  }, [onPlaybackError, store]);
  return (currentPlaybackSource === null || currentPlaybackSource === void 0 ? void 0 : currentPlaybackSource.type) === 'webrtc' ? /*#__PURE__*/jsx(WebRTCVideoPlayer, _objectSpread2(_objectSpread2({}, props), {}, {
    ref: ref,
    src: currentPlaybackSource,
    fullscreen: fullscreen
  })) : (currentPlaybackSource === null || currentPlaybackSource === void 0 ? void 0 : currentPlaybackSource.type) === 'hls' ? /*#__PURE__*/jsx(HLSVideoPlayer, _objectSpread2(_objectSpread2({}, props), {}, {
    ref: ref,
    src: currentPlaybackSource,
    fullscreen: fullscreen
  })) : /*#__PURE__*/jsx(HtmlVideoPlayer, _objectSpread2(_objectSpread2({}, props), {}, {
    ref: ref,
    src: currentPlaybackSource,
    fullscreen: fullscreen
  }));
});
var VideoPlayer = /*#__PURE__*/React.memo(InternalVideoPlayer);

var useIsElementShown = function useIsElementShown(target) {
  var _React$useState = React.useState(false),
    _React$useState2 = _slicedToArray(_React$useState, 2),
    isCurrentlyShown = _React$useState2[0],
    setIsCurrentlyShown = _React$useState2[1];
  React.useEffect(function () {
    if (typeof window !== 'undefined' && target) {
      if ('IntersectionObserver' in window) {
        var observer = new IntersectionObserver(function (_ref) {
          var _ref2 = _slicedToArray(_ref, 1),
            entry = _ref2[0];
          return setIsCurrentlyShown(Boolean(entry === null || entry === void 0 ? void 0 : entry.isIntersecting));
        });
        observer.observe(target);
        return function () {
          observer.disconnect();
        };
      } else {
        // we default to currently shown on Opera and other browsers that don't support IntersectionObserver
        setIsCurrentlyShown(true);
      }
    }
  }, [target]);
  return isCurrentlyShown;
};

var PlayerInternal = function PlayerInternal(props) {
  var _source$;
  var _React$useState = React.useState(false),
    _React$useState2 = _slicedToArray(_React$useState, 2),
    isCurrentlyShown = _React$useState2[0],
    setIsCurrentlyShown = _React$useState2[1];
  var screenWidth = React.useMemo(function () {
    var _ref, _window, _window$screen, _window2;
    return typeof window !== 'undefined' ? (_ref = ((_window = window) === null || _window === void 0 ? void 0 : (_window$screen = _window.screen) === null || _window$screen === void 0 ? void 0 : _window$screen.availWidth) || ((_window2 = window) === null || _window2 === void 0 ? void 0 : _window2.innerWidth)) !== null && _ref !== void 0 ? _ref : null : null;
  }, []);
  var isCurrentlyShownCombined = React.useMemo(function () {
    var _props$_isCurrentlySh;
    return (_props$_isCurrentlySh = props._isCurrentlyShown) !== null && _props$_isCurrentlySh !== void 0 ? _props$_isCurrentlySh : isCurrentlyShown;
  }, [props._isCurrentlyShown, isCurrentlyShown]);
  var _usePlayer = usePlayer(_objectSpread2(_objectSpread2({}, props), {}, {
      _isCurrentlyShown: isCurrentlyShownCombined
    }), {
      _screenWidth: screenWidth
    }),
    mediaElement = _usePlayer.mediaElement,
    playerProps = _usePlayer.playerProps,
    mediaControllerProps = _usePlayer.mediaControllerProps,
    controlsContainerProps = _usePlayer.controlsContainerProps,
    source = _usePlayer.source,
    _usePlayer$props = _usePlayer.props,
    children = _usePlayer$props.children,
    controls = _usePlayer$props.controls,
    theme = _usePlayer$props.theme,
    title = _usePlayer$props.title,
    poster = _usePlayer$props.poster,
    showTitle = _usePlayer$props.showTitle,
    aspectRatio = _usePlayer$props.aspectRatio,
    renderChildrenOutsideContainer = _usePlayer$props.renderChildrenOutsideContainer;
  var _isCurrentlyShown = useIsElementShown(mediaElement);
  React.useEffect(function () {
    setIsCurrentlyShown(_isCurrentlyShown);
  }, [_isCurrentlyShown]);
  return /*#__PURE__*/jsxs(MediaControllerProvider, {
    element: mediaElement,
    opts: controls,
    mediaProps: mediaControllerProps,
    children: [/*#__PURE__*/jsxs(Container, {
      theme: theme,
      aspectRatio: aspectRatio,
      tabIndex: props.tabIndex,
      children: [source && (source === null || source === void 0 ? void 0 : (_source$ = source[0]) === null || _source$ === void 0 ? void 0 : _source$.type) === 'audio' ? /*#__PURE__*/jsx(AudioPlayer, _objectSpread2(_objectSpread2({}, playerProps), {}, {
        src: source,
        allowCrossOriginCredentials: props.allowCrossOriginCredentials
      })) : /*#__PURE__*/jsx(VideoPlayer, _objectSpread2(_objectSpread2({}, playerProps), {}, {
        hlsConfig: props.hlsConfig,
        webrtcConfig: props.webrtcConfig,
        lowLatency: props.lowLatency,
        playRecording: props.playRecording,
        playbackStatusSelector: props.playbackStatusSelector,
        allowCrossOriginCredentials: props.allowCrossOriginCredentials,
        src: source
      })), !renderChildrenOutsideContainer && /*#__PURE__*/React.isValidElement(children) ? /*#__PURE__*/React.cloneElement(children, controlsContainerProps) : /*#__PURE__*/jsx(ControlsContainer, _objectSpread2(_objectSpread2({}, controlsContainerProps), {}, {
        poster: poster && /*#__PURE__*/jsx(Poster, {
          content: poster,
          title: title
        }),
        top: /*#__PURE__*/jsx(Fragment, {
          children: title && showTitle && /*#__PURE__*/jsx(Title, {
            content: title
          })
        }),
        middle: /*#__PURE__*/jsx(Progress, {}),
        left: /*#__PURE__*/jsxs(Fragment, {
          children: [/*#__PURE__*/jsx(PlayButton, {}), /*#__PURE__*/jsx(Volume, {}), /*#__PURE__*/jsx(TimeDisplay, {})]
        }),
        right: /*#__PURE__*/jsxs(Fragment, {
          children: [props.clipLength && /*#__PURE__*/jsx(ClipButton, {
            length: props.clipLength
          }), props.showPipButton && /*#__PURE__*/jsx(PictureInPictureButton, {}), /*#__PURE__*/jsx(FullscreenButton, {})]
        })
      }))]
    }), renderChildrenOutsideContainer && /*#__PURE__*/React.isValidElement(children) ? children : /*#__PURE__*/jsx(Fragment, {})]
  });
};
var typedMemo = React.memo;
var Player = typedMemo(PlayerInternal);

export { AudioSourceSelect as A, BaseSlider as B, ControlsContainer as C, FullscreenButton as F, PictureInPictureButton as P, Screenshare as S, TimeDisplay as T, VideoSourceSelect as V, AudioToggle as a, Broadcast as b, BroadcastSettings as c, PlayButton as d, Player as e, Poster as f, Progress as g, Title as h, VideoToggle as i, Volume as j };
