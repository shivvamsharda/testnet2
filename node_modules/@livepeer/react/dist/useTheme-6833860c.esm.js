import { useClient, useTheme as useTheme$1 } from '@livepeer/core-react/context';
import { version, createStorage } from '@livepeer/core-web';
import { createControllerStore } from '@livepeer/core-web/media';
import { getDeviceInfo, addEventListeners } from '@livepeer/core-web/media/browser';
import * as React from 'react';
import { jsx } from 'react/jsx-runtime';
import { useStore } from 'zustand';
import { createTheme } from '@livepeer/core-web/media/browser/styling';

var ThemeContext = /*#__PURE__*/React.createContext(null);

var MediaControllerContext = /*#__PURE__*/React.createContext(createControllerStore({
  element: undefined,
  device: getDeviceInfo(version.react),
  storage: createStorage({}),
  mediaProps: {},
  opts: {}
}));

var MediaControllerProvider = function MediaControllerProvider(_ref) {
  var element = _ref.element,
    children = _ref.children,
    mediaProps = _ref.mediaProps,
    opts = _ref.opts;
  var mediaController = useMediaControllerStore(element, opts, mediaProps);
  return /*#__PURE__*/jsx(MediaControllerContext.Provider, {
    value: mediaController,
    children: children
  });
};
var useMediaControllerStore = function useMediaControllerStore(element, opts, mediaProps) {
  var client = useClient();
  var store = React.useMemo(function () {
    return createControllerStore({
      device: getDeviceInfo(version.react),
      storage: client.storage,
      opts: opts !== null && opts !== void 0 ? opts : {},
      mediaProps: mediaProps
    });
  }, [client === null || client === void 0 ? void 0 : client.storage, opts, mediaProps]);
  React.useEffect(function () {
    if (element) {
      store.setState({
        _element: element
      });
    }
  }, [store, element]);
  React.useEffect(function () {
    var _addEventListeners = addEventListeners(store, opts),
      destroy = _addEventListeners.destroy;
    return function () {
      destroy === null || destroy === void 0 ? void 0 : destroy();
    };
  }, [store, element, opts]);
  return store;
};

var useMediaController = function useMediaController(selector) {
  var mediaController = React.useContext(MediaControllerContext);
  return useStore(mediaController, selector);
};

var useTheme = function useTheme(theme) {
  return useTheme$1(ThemeContext, createTheme, theme);
};

export { MediaControllerProvider as M, ThemeContext as T, useTheme as a, MediaControllerContext as b, useMediaController as u };
