'use strict';

var context = require('@livepeer/core-react/context');
var coreWeb = require('@livepeer/core-web');
var media = require('@livepeer/core-web/media');
var browser = require('@livepeer/core-web/media/browser');
var React = require('react');
var jsxRuntime = require('react/jsx-runtime');
var zustand = require('zustand');
var styling = require('@livepeer/core-web/media/browser/styling');

function _interopNamespace(e) {
  if (e && e.__esModule) return e;
  var n = Object.create(null);
  if (e) {
    Object.keys(e).forEach(function (k) {
      if (k !== 'default') {
        var d = Object.getOwnPropertyDescriptor(e, k);
        Object.defineProperty(n, k, d.get ? d : {
          enumerable: true,
          get: function () { return e[k]; }
        });
      }
    });
  }
  n["default"] = e;
  return Object.freeze(n);
}

var React__namespace = /*#__PURE__*/_interopNamespace(React);

var ThemeContext = /*#__PURE__*/React__namespace.createContext(null);

var MediaControllerContext = /*#__PURE__*/React__namespace.createContext(media.createControllerStore({
  element: undefined,
  device: browser.getDeviceInfo(coreWeb.version.react),
  storage: coreWeb.createStorage({}),
  mediaProps: {},
  opts: {}
}));

var MediaControllerProvider = function MediaControllerProvider(_ref) {
  var element = _ref.element,
    children = _ref.children,
    mediaProps = _ref.mediaProps,
    opts = _ref.opts;
  var mediaController = useMediaControllerStore(element, opts, mediaProps);
  return /*#__PURE__*/jsxRuntime.jsx(MediaControllerContext.Provider, {
    value: mediaController,
    children: children
  });
};
var useMediaControllerStore = function useMediaControllerStore(element, opts, mediaProps) {
  var client = context.useClient();
  var store = React__namespace.useMemo(function () {
    return media.createControllerStore({
      device: browser.getDeviceInfo(coreWeb.version.react),
      storage: client.storage,
      opts: opts !== null && opts !== void 0 ? opts : {},
      mediaProps: mediaProps
    });
  }, [client === null || client === void 0 ? void 0 : client.storage, opts, mediaProps]);
  React__namespace.useEffect(function () {
    if (element) {
      store.setState({
        _element: element
      });
    }
  }, [store, element]);
  React__namespace.useEffect(function () {
    var _addEventListeners = browser.addEventListeners(store, opts),
      destroy = _addEventListeners.destroy;
    return function () {
      destroy === null || destroy === void 0 ? void 0 : destroy();
    };
  }, [store, element, opts]);
  return store;
};

var useMediaController = function useMediaController(selector) {
  var mediaController = React__namespace.useContext(MediaControllerContext);
  return zustand.useStore(mediaController, selector);
};

var useTheme = function useTheme(theme) {
  return context.useTheme(ThemeContext, styling.createTheme, theme);
};

exports.MediaControllerContext = MediaControllerContext;
exports.MediaControllerProvider = MediaControllerProvider;
exports.ThemeContext = ThemeContext;
exports.useMediaController = useMediaController;
exports.useTheme = useTheme;
