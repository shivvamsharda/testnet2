'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var LivepeerConfig = require('../../dist/LivepeerConfig-f7b8e2cd.cjs.prod.js');
var utils = require('@livepeer/core/utils');
var React = require('react');
require('@tanstack/react-query');
require('react/jsx-runtime');

function _interopNamespace(e) {
  if (e && e.__esModule) return e;
  var n = Object.create(null);
  if (e) {
    Object.keys(e).forEach(function (k) {
      if (k !== 'default') {
        var d = Object.getOwnPropertyDescriptor(e, k);
        Object.defineProperty(n, k, d.get ? d : {
          enumerable: true,
          get: function () { return e[k]; }
        });
      }
    });
  }
  n["default"] = e;
  return Object.freeze(n);
}

var React__namespace = /*#__PURE__*/_interopNamespace(React);

const useTheme = (ThemeContext, createTheme, theme) => {
  const contextTheme = React__namespace.useContext(ThemeContext);
  const containerTheme = React__namespace.useMemo(() => {
    const mergedTheme = contextTheme ? theme ? utils.deepMerge(contextTheme, theme) : utils.deepMerge(contextTheme) : theme;

    // override tokens based on priority
    const overriddenTheme = mergedTheme ? utils.deepMerge({
      colors: {
        progressLeft: mergedTheme.colors?.progressLeft ?? mergedTheme.colors?.accent,
        progressMiddle: mergedTheme.colors?.progressMiddle ?? mergedTheme.colors?.accent,
        progressRight: mergedTheme.colors?.progressRight ?? mergedTheme.colors?.accent,
        volumeLeft: mergedTheme.colors?.volumeLeft ?? mergedTheme.colors?.accent,
        volumeMiddle: mergedTheme.colors?.volumeMiddle ?? mergedTheme.colors?.accent,
        volumeRight: mergedTheme.colors?.volumeRight ?? mergedTheme.colors?.accent,
        progressThumb: mergedTheme.colors?.progressThumb ?? mergedTheme.colors?.icon,
        volumeThumb: mergedTheme.colors?.volumeThumb ?? mergedTheme.colors?.icon,
        loading: mergedTheme.colors?.loading ?? mergedTheme.colors?.accent
      }
    }, mergedTheme) : undefined;
    const filteredTheme = overriddenTheme ? removeNullish(overriddenTheme) : undefined;
    return filteredTheme ? createTheme(filteredTheme) : undefined;
  }, [theme, contextTheme, createTheme]);
  return containerTheme;
};
function removeNullish(obj) {
  return Object.fromEntries(Object.entries(obj).filter(([_, v]) => v != null).map(([k, v]) => [k, v === Object(v) ? removeNullish(v) : v]));
}

exports.Context = LivepeerConfig.Context;
exports.LivepeerConfig = LivepeerConfig.LivepeerConfig;
exports.QueryClientContext = LivepeerConfig.QueryClientContext;
exports.useClient = LivepeerConfig.useClient;
exports.useTheme = useTheme;
