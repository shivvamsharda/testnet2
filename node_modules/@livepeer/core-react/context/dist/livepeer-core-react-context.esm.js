export { C as Context, L as LivepeerConfig, Q as QueryClientContext, u as useClient } from '../../dist/LivepeerConfig-bc769187.esm.js';
import { deepMerge } from '@livepeer/core/utils';
import * as React from 'react';
import '@tanstack/react-query';
import 'react/jsx-runtime';

const useTheme = (ThemeContext, createTheme, theme) => {
  const contextTheme = React.useContext(ThemeContext);
  const containerTheme = React.useMemo(() => {
    const mergedTheme = contextTheme ? theme ? deepMerge(contextTheme, theme) : deepMerge(contextTheme) : theme;

    // override tokens based on priority
    const overriddenTheme = mergedTheme ? deepMerge({
      colors: {
        progressLeft: mergedTheme.colors?.progressLeft ?? mergedTheme.colors?.accent,
        progressMiddle: mergedTheme.colors?.progressMiddle ?? mergedTheme.colors?.accent,
        progressRight: mergedTheme.colors?.progressRight ?? mergedTheme.colors?.accent,
        volumeLeft: mergedTheme.colors?.volumeLeft ?? mergedTheme.colors?.accent,
        volumeMiddle: mergedTheme.colors?.volumeMiddle ?? mergedTheme.colors?.accent,
        volumeRight: mergedTheme.colors?.volumeRight ?? mergedTheme.colors?.accent,
        progressThumb: mergedTheme.colors?.progressThumb ?? mergedTheme.colors?.icon,
        volumeThumb: mergedTheme.colors?.volumeThumb ?? mergedTheme.colors?.icon,
        loading: mergedTheme.colors?.loading ?? mergedTheme.colors?.accent
      }
    }, mergedTheme) : undefined;
    const filteredTheme = overriddenTheme ? removeNullish(overriddenTheme) : undefined;
    return filteredTheme ? createTheme(filteredTheme) : undefined;
  }, [theme, contextTheme, createTheme]);
  return containerTheme;
};
function removeNullish(obj) {
  return Object.fromEntries(Object.entries(obj).filter(([_, v]) => v != null).map(([k, v]) => [k, v === Object(v) ? removeNullish(v) : v]));
}

export { useTheme };
