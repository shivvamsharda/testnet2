'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var system = require('../../dist/system-9b7443ef.cjs.prod.js');
var actions = require('@livepeer/core/actions');
var client = require('@livepeer/core/client');
var utils = require('@livepeer/core/utils');
var useInternalQuery = require('../../dist/useInternalQuery-c049f707.cjs.prod.js');
require('react');
require('use-sync-external-store/shim/with-selector.js');
require('@tanstack/react-query');
require('../../dist/client-b79b683b.cjs.prod.js');
require('@tanstack/query-async-storage-persister');
require('@tanstack/react-query-persist-client');
require('@livepeer/core');
require('../../dist/LivepeerConfig-f7b8e2cd.cjs.prod.js');
require('react/jsx-runtime');

const queryKey$4 = (args, config) => [{
  entity: 'getAsset',
  args,
  config
}];
function useAsset(args) {
  const livepeerProvider = system.useLivepeerProvider();
  return useInternalQuery.useInternalQuery(getQueryParams$4(args, livepeerProvider));
}
async function prefetchAsset(args, config) {
  const livepeerClient = client.createClient(config);
  return useInternalQuery.prefetchQuery(getQueryParams$4(args, livepeerClient.provider));
}
function getQueryParams$4(args, provider) {
  const getAssetArgs = typeof args === 'string' ? args : {
    assetId: args?.assetId ?? ''
  };
  return {
    clearClient: args.clearClient,
    queryKey: queryKey$4(getAssetArgs, provider.getConfig()),
    queryFn: async () => actions.getAsset(getAssetArgs),
    enabled: Boolean(typeof args === 'string' ? args : args?.assetId),
    ...(typeof args === 'object' ? utils.pick(args, ...useInternalQuery.usePickQueryKeys) : {})
  };
}

function useUpdateAsset(options) {
  const livepeerProvider = system.useLivepeerProvider();
  return useInternalQuery.useInternalMutation(options, async args => actions.updateAsset(args), [{
    entity: 'updateAsset',
    livepeerProvider
  }]);
}

async function prefetchPlayer(props, config) {
  return system.prefetchPlaybackInfo({
    playbackId: props?.playbackId ?? undefined,
    clearClient: props.clearClient
  }, config);
}

const queryKey$3 = (args, config) => [{
  entity: 'getAssetMetrics',
  args,
  config
}];
function useAssetMetrics(args) {
  const livepeerProvider = system.useLivepeerProvider();
  return useInternalQuery.useInternalQuery(getQueryParams$3(args, livepeerProvider));
}
async function prefetchAssetMetrics(args, config) {
  const livepeerClient = client.createClient(config);
  return useInternalQuery.prefetchQuery(getQueryParams$3(args, livepeerClient.provider));
}
function getQueryParams$3(args, provider) {
  const getAssetMetricsArgs = {
    assetId: args?.assetId ?? ''
  };
  return {
    clearClient: args.clearClient,
    queryKey: queryKey$3(getAssetMetricsArgs, provider.getConfig()),
    queryFn: async () => actions.getAssetMetrics(args),
    enabled: Boolean(args?.assetId),
    ...(typeof args === 'object' ? utils.pick(args, ...useInternalQuery.usePickQueryKeys) : {})
  };
}

function useCreateClip(options) {
  const livepeerProvider = system.useLivepeerProvider();
  return useInternalQuery.useInternalMutation(options, async args => actions.createClip(args), [{
    entity: 'createClip',
    livepeerProvider
  }]);
}

function useCreateStream(options) {
  const livepeerProvider = system.useLivepeerProvider();
  return useInternalQuery.useInternalMutation(options, async args => actions.createStream(args), [{
    entity: 'createStream',
    livepeerProvider
  }]);
}

const queryKey$2 = (args, config) => [{
  entity: 'getStream',
  args,
  config
}];
function useStream(args) {
  const livepeerProvider = system.useLivepeerProvider();
  return useInternalQuery.useInternalQuery(getQueryParams$2(args, livepeerProvider));
}
async function prefetchStream(args, config) {
  const livepeerClient = client.createClient(config);
  return useInternalQuery.prefetchQuery(getQueryParams$2(args, livepeerClient.provider));
}
function getQueryParams$2(args, provider) {
  const getStreamArgs = typeof args === 'string' ? args : {
    streamId: args?.streamId ?? ''
  };
  return {
    clearClient: args.clearClient,
    queryKey: queryKey$2(getStreamArgs, provider.getConfig()),
    queryFn: async () => actions.getStream(getStreamArgs),
    enabled: Boolean(typeof args === 'string' ? args : args?.streamId),
    ...(typeof args === 'object' ? utils.pick(args, ...useInternalQuery.usePickQueryKeys) : {})
  };
}

const queryKey$1 = (args, config) => [{
  entity: 'getStreamSession',
  args,
  config
}];
function useStreamSession(args) {
  const livepeerProvider = system.useLivepeerProvider();
  return useInternalQuery.useInternalQuery(getQueryParams$1(args, livepeerProvider));
}
async function prefetchStreamSession(args, config) {
  const livepeerClient = client.createClient(config);
  return useInternalQuery.prefetchQuery(getQueryParams$1(args, livepeerClient.provider));
}
function getQueryParams$1(args, provider) {
  const getStreamSessionArgs = typeof args === 'string' ? args : {
    streamSessionId: args?.streamSessionId ?? ''
  };
  return {
    clearClient: args.clearClient,
    queryKey: queryKey$1(getStreamSessionArgs, provider.getConfig()),
    queryFn: async () => actions.getStreamSession(getStreamSessionArgs),
    enabled: Boolean(typeof args === 'string' ? args : args?.streamSessionId),
    ...(typeof args === 'object' ? utils.pick(args, ...useInternalQuery.usePickQueryKeys) : {})
  };
}

const queryKey = (args, config) => [{
  entity: 'getStreamSessions',
  args,
  config
}];
function useStreamSessions(args) {
  const livepeerProvider = system.useLivepeerProvider();
  return useInternalQuery.useInternalQuery(getQueryParams(args, livepeerProvider));
}
async function prefetchStreamSessions(args, config) {
  const livepeerClient = client.createClient(config);
  return useInternalQuery.prefetchQuery(getQueryParams(args, livepeerClient.provider));
}
function getQueryParams(args, provider) {
  const getStreamSessionsArgs = typeof args === 'string' ? args : {
    streamId: args?.streamId ?? ''
  };
  return {
    clearClient: args.clearClient,
    queryKey: queryKey(getStreamSessionsArgs, provider.getConfig()),
    queryFn: async () => actions.getStreamSessions(getStreamSessionsArgs),
    enabled: Boolean(typeof args === 'string' ? args : args?.streamId),
    ...(typeof args === 'object' ? utils.pick(args, ...useInternalQuery.usePickQueryKeys) : {})
  };
}

function useUpdateStream(options) {
  const livepeerProvider = system.useLivepeerProvider();
  return useInternalQuery.useInternalMutation(options, async args => actions.updateStream(args), [{
    entity: 'updateStream',
    livepeerProvider
  }]);
}

exports.prefetchPlaybackInfo = system.prefetchPlaybackInfo;
exports.useConditionalIcon = system.useConditionalIcon;
exports.useCreateAsset = system.useCreateAsset;
exports.useLivepeerProvider = system.useLivepeerProvider;
exports.useMemoizedIcon = system.useMemoizedIcon;
exports.usePlaybackInfo = system.usePlaybackInfo;
exports.prefetchAsset = prefetchAsset;
exports.prefetchAssetMetrics = prefetchAssetMetrics;
exports.prefetchPlayer = prefetchPlayer;
exports.prefetchStream = prefetchStream;
exports.prefetchStreamSession = prefetchStreamSession;
exports.prefetchStreamSessions = prefetchStreamSessions;
exports.useAsset = useAsset;
exports.useAssetMetrics = useAssetMetrics;
exports.useCreateClip = useCreateClip;
exports.useCreateStream = useCreateStream;
exports.useStream = useStream;
exports.useStreamSession = useStreamSession;
exports.useStreamSessions = useStreamSessions;
exports.useUpdateAsset = useUpdateAsset;
exports.useUpdateStream = useUpdateStream;
