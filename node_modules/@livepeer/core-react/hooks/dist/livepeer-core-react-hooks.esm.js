import { u as useLivepeerProvider, p as prefetchPlaybackInfo } from '../../dist/system-f1ea33f2.esm.js';
export { p as prefetchPlaybackInfo, c as useConditionalIcon, a as useCreateAsset, u as useLivepeerProvider, d as useMemoizedIcon, b as usePlaybackInfo } from '../../dist/system-f1ea33f2.esm.js';
import { getAsset, updateAsset, getAssetMetrics, createClip, createStream, getStream, getStreamSession, getStreamSessions, updateStream } from '@livepeer/core/actions';
import { createClient } from '@livepeer/core/client';
import { pick } from '@livepeer/core/utils';
import { u as useInternalQuery, p as prefetchQuery, a as usePickQueryKeys, b as useInternalMutation } from '../../dist/useInternalQuery-9e9dd997.esm.js';
import 'react';
import 'use-sync-external-store/shim/with-selector.js';
import '@tanstack/react-query';
import '../../dist/client-c79d9b6b.esm.js';
import '@tanstack/query-async-storage-persister';
import '@tanstack/react-query-persist-client';
import '@livepeer/core';
import '../../dist/LivepeerConfig-bc769187.esm.js';
import 'react/jsx-runtime';

const queryKey$4 = (args, config) => [{
  entity: 'getAsset',
  args,
  config
}];
function useAsset(args) {
  const livepeerProvider = useLivepeerProvider();
  return useInternalQuery(getQueryParams$4(args, livepeerProvider));
}
async function prefetchAsset(args, config) {
  const livepeerClient = createClient(config);
  return prefetchQuery(getQueryParams$4(args, livepeerClient.provider));
}
function getQueryParams$4(args, provider) {
  const getAssetArgs = typeof args === 'string' ? args : {
    assetId: args?.assetId ?? ''
  };
  return {
    clearClient: args.clearClient,
    queryKey: queryKey$4(getAssetArgs, provider.getConfig()),
    queryFn: async () => getAsset(getAssetArgs),
    enabled: Boolean(typeof args === 'string' ? args : args?.assetId),
    ...(typeof args === 'object' ? pick(args, ...usePickQueryKeys) : {})
  };
}

function useUpdateAsset(options) {
  const livepeerProvider = useLivepeerProvider();
  return useInternalMutation(options, async args => updateAsset(args), [{
    entity: 'updateAsset',
    livepeerProvider
  }]);
}

async function prefetchPlayer(props, config) {
  return prefetchPlaybackInfo({
    playbackId: props?.playbackId ?? undefined,
    clearClient: props.clearClient
  }, config);
}

const queryKey$3 = (args, config) => [{
  entity: 'getAssetMetrics',
  args,
  config
}];
function useAssetMetrics(args) {
  const livepeerProvider = useLivepeerProvider();
  return useInternalQuery(getQueryParams$3(args, livepeerProvider));
}
async function prefetchAssetMetrics(args, config) {
  const livepeerClient = createClient(config);
  return prefetchQuery(getQueryParams$3(args, livepeerClient.provider));
}
function getQueryParams$3(args, provider) {
  const getAssetMetricsArgs = {
    assetId: args?.assetId ?? ''
  };
  return {
    clearClient: args.clearClient,
    queryKey: queryKey$3(getAssetMetricsArgs, provider.getConfig()),
    queryFn: async () => getAssetMetrics(args),
    enabled: Boolean(args?.assetId),
    ...(typeof args === 'object' ? pick(args, ...usePickQueryKeys) : {})
  };
}

function useCreateClip(options) {
  const livepeerProvider = useLivepeerProvider();
  return useInternalMutation(options, async args => createClip(args), [{
    entity: 'createClip',
    livepeerProvider
  }]);
}

function useCreateStream(options) {
  const livepeerProvider = useLivepeerProvider();
  return useInternalMutation(options, async args => createStream(args), [{
    entity: 'createStream',
    livepeerProvider
  }]);
}

const queryKey$2 = (args, config) => [{
  entity: 'getStream',
  args,
  config
}];
function useStream(args) {
  const livepeerProvider = useLivepeerProvider();
  return useInternalQuery(getQueryParams$2(args, livepeerProvider));
}
async function prefetchStream(args, config) {
  const livepeerClient = createClient(config);
  return prefetchQuery(getQueryParams$2(args, livepeerClient.provider));
}
function getQueryParams$2(args, provider) {
  const getStreamArgs = typeof args === 'string' ? args : {
    streamId: args?.streamId ?? ''
  };
  return {
    clearClient: args.clearClient,
    queryKey: queryKey$2(getStreamArgs, provider.getConfig()),
    queryFn: async () => getStream(getStreamArgs),
    enabled: Boolean(typeof args === 'string' ? args : args?.streamId),
    ...(typeof args === 'object' ? pick(args, ...usePickQueryKeys) : {})
  };
}

const queryKey$1 = (args, config) => [{
  entity: 'getStreamSession',
  args,
  config
}];
function useStreamSession(args) {
  const livepeerProvider = useLivepeerProvider();
  return useInternalQuery(getQueryParams$1(args, livepeerProvider));
}
async function prefetchStreamSession(args, config) {
  const livepeerClient = createClient(config);
  return prefetchQuery(getQueryParams$1(args, livepeerClient.provider));
}
function getQueryParams$1(args, provider) {
  const getStreamSessionArgs = typeof args === 'string' ? args : {
    streamSessionId: args?.streamSessionId ?? ''
  };
  return {
    clearClient: args.clearClient,
    queryKey: queryKey$1(getStreamSessionArgs, provider.getConfig()),
    queryFn: async () => getStreamSession(getStreamSessionArgs),
    enabled: Boolean(typeof args === 'string' ? args : args?.streamSessionId),
    ...(typeof args === 'object' ? pick(args, ...usePickQueryKeys) : {})
  };
}

const queryKey = (args, config) => [{
  entity: 'getStreamSessions',
  args,
  config
}];
function useStreamSessions(args) {
  const livepeerProvider = useLivepeerProvider();
  return useInternalQuery(getQueryParams(args, livepeerProvider));
}
async function prefetchStreamSessions(args, config) {
  const livepeerClient = createClient(config);
  return prefetchQuery(getQueryParams(args, livepeerClient.provider));
}
function getQueryParams(args, provider) {
  const getStreamSessionsArgs = typeof args === 'string' ? args : {
    streamId: args?.streamId ?? ''
  };
  return {
    clearClient: args.clearClient,
    queryKey: queryKey(getStreamSessionsArgs, provider.getConfig()),
    queryFn: async () => getStreamSessions(getStreamSessionsArgs),
    enabled: Boolean(typeof args === 'string' ? args : args?.streamId),
    ...(typeof args === 'object' ? pick(args, ...usePickQueryKeys) : {})
  };
}

function useUpdateStream(options) {
  const livepeerProvider = useLivepeerProvider();
  return useInternalMutation(options, async args => updateStream(args), [{
    entity: 'updateStream',
    livepeerProvider
  }]);
}

export { prefetchAsset, prefetchAssetMetrics, prefetchPlayer, prefetchStream, prefetchStreamSession, prefetchStreamSessions, useAsset, useAssetMetrics, useCreateClip, useCreateStream, useStream, useStreamSession, useStreamSessions, useUpdateAsset, useUpdateStream };
