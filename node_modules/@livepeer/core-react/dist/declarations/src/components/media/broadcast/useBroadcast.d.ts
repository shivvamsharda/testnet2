import { ControlsOptions, MediaControllerCallbackState, MediaPropsOptions, ObjectFit, PlaybackError } from '@livepeer/core';
import { AspectRatio, ThemeConfig } from '@livepeer/core/media';
import * as React from 'react';
export type BroadcastProps<TElement, TMediaStream, TSlice> = {
    /** The stream key for the broadcast. This is required. */
    streamKey: string | null | undefined;
    /** The title of the media */
    title?: string;
    /**
     * The aspect ratio of the media. Defaults to 16to9 (16 / 9).
     * This significantly improves the cumulative layout shift and is required.
     *
     * @see {@link https://web.dev/cls/}
     */
    aspectRatio?: AspectRatio;
    /** Configuration for the event listeners */
    controls?: ControlsOptions;
    /** Theme configuration for the broadcast */
    theme?: ThemeConfig;
    /** The object-fit property for the video element. Defaults to cover (contain is usually used in full-screen applications) */
    objectFit?: ObjectFit;
    /** Custom controls passed in to override the default controls */
    children?: React.ReactNode;
    /**
     * Whether the children should be rendered outside of the aspect ratio container.
     * This is used for custom controls, so children of the Player can use
     * `useMediaController` without any parent elements.
     */
    renderChildrenOutsideContainer?: boolean;
    /** Callback called when an error occurs */
    onError?: (error: Error) => void;
    /** Callback ref passed to the underlying media element. Simple refs are not supported, due to the use of HLS.js under the hood. */
    mediaElementRef?: React.RefCallback<TElement | null | undefined>;
    /** Callback called when the broadcast status updates. **This should be used with `playbackStatusSelector` to limit state updates.** */
    onPlaybackStatusUpdate?: (state: TSlice, previousState: TSlice) => any;
    /** Selector used with `onPlaybackStatusUpdate`. */
    playbackStatusSelector?: (state: MediaControllerCallbackState<TElement, TMediaStream>) => TSlice;
};
export declare const useBroadcast: <TElement, TMediaStream, TSlice>({ streamKey, children, controls, theme, title, onError, aspectRatio, objectFit, mediaElementRef, onPlaybackStatusUpdate, playbackStatusSelector, renderChildrenOutsideContainer, }: BroadcastProps<TElement, TMediaStream, TSlice>) => {
    mediaElement: TElement | null;
    broadcastProps: {
        ref: (element: TElement | null) => void;
        ingestUrl: string | null;
        objectFit: ObjectFit;
        options: ControlsOptions | undefined;
        broadcastError: PlaybackError | null;
        onBroadcastError: (error: Error | null) => Error | null;
        onPlaybackStatusUpdate: ((state: TSlice, previousState: TSlice) => any) | undefined;
        playbackStatusSelector: ((state: MediaControllerCallbackState<TElement, TMediaStream>) => TSlice) | undefined;
    };
    mediaControllerProps: MediaPropsOptions;
    controlsContainerProps: {
        hidePosterOnPlayed: boolean;
        showLoadingSpinner: boolean;
        loadingText: null;
        showUploadingIndicator: boolean;
        error: PlaybackError | null;
    };
    props: {
        ingestUrl: string | null;
        children: React.ReactNode;
        controls: ControlsOptions | undefined;
        theme: Partial<{
            borderStyles: {
                containerBorderStyle?: "solid" | "dotted" | "dashed" | undefined;
            };
            borderWidths: {
                buttonLoadingWidth?: string | number | undefined;
                containerBorderWidth?: string | number | undefined;
                loadingWidth?: string | number | undefined;
            };
            colors: {
                accent?: string | undefined;
                background?: string | undefined;
                containerBorderColor?: string | undefined;
                icon?: string | undefined;
                iconHover?: string | undefined;
                liveIndicator?: string | undefined;
                loading?: string | undefined;
                progressLeft?: string | undefined;
                progressMiddle?: string | undefined;
                progressRight?: string | undefined;
                progressThumb?: string | undefined;
                volumeLeft?: string | undefined;
                volumeMiddle?: string | undefined;
                volumeRight?: string | undefined;
                volumeThumb?: string | undefined;
                errorText?: string | undefined;
            };
            fonts: {
                display?: string | undefined;
            };
            fontSizes: {
                timeFontSize?: string | number | undefined;
                timeFontSizeMd?: string | number | undefined;
                timeFontSizeSm?: string | number | undefined;
                titleFontSize?: string | number | undefined;
                titleFontSizeMd?: string | number | undefined;
                titleFontSizeSm?: string | number | undefined;
                errorTitleFontSize?: string | number | undefined;
                errorTitleFontSizeMd?: string | number | undefined;
                errorTitleFontSizeSm?: string | number | undefined;
                errorTextFontSize?: string | number | undefined;
                errorTextFontSizeMd?: string | number | undefined;
                errorTextFontSizeSm?: string | number | undefined;
            };
            fontWeights: {
                titleFontWeight?: import("@livepeer/core/media").FontWeights | undefined;
                errorTitleFontWeight?: import("@livepeer/core/media").FontWeights | undefined;
            };
            sizes: {
                iconButtonSize?: string | number | undefined;
                iconButtonSizeSm?: string | number | undefined;
                liveIndicatorSize?: string | number | undefined;
                loading?: string | number | undefined;
                thumb?: string | number | undefined;
                thumbActive?: string | number | undefined;
                trackActive?: string | number | undefined;
                trackContainerHeight?: string | number | undefined;
                trackContainerHeightSm?: string | number | undefined;
                trackInactive?: string | number | undefined;
            };
            space: {
                controlsBottomMarginX?: string | number | undefined;
                controlsBottomMarginY?: string | number | undefined;
                controlsTopMarginX?: string | number | undefined;
                controlsTopMarginY?: string | number | undefined;
                timeMarginX?: string | number | undefined;
            };
            radii: {
                containerBorderRadius?: string | number | undefined;
                slider?: string | number | undefined;
            };
        }> | undefined;
        title: string | undefined;
        aspectRatio: "16to9" | "1to1" | "9to16" | "4to5" | "21to9";
        objectFit: ObjectFit;
        onBroadcastError: (error: Error | null) => Error | null;
        onPlaybackStatusUpdate: ((state: TSlice, previousState: TSlice) => any) | undefined;
        renderChildrenOutsideContainer: boolean | undefined;
    };
};
