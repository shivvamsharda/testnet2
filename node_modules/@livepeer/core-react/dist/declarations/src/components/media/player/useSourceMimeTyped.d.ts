import { AudioSrc, Base64Src, HlsSrc, VideoSrc, WebRTCSrc } from '@livepeer/core';
import { CreateAssetUrlProgress } from '@livepeer/core/types';
import { InternalPlayerProps, PlayerProps } from './usePlayer';
export type UseSourceMimeTypedProps<TElement, TPoster, TPlaybackPolicyObject extends object, TSlice> = {
    src: PlayerProps<TElement, TPoster, TPlaybackPolicyObject, TSlice>['src'];
    playbackId: PlayerProps<TElement, TPoster, TPlaybackPolicyObject, TSlice>['playbackId'];
    refetchPlaybackInfoInterval: NonNullable<PlayerProps<TElement, TPoster, TPlaybackPolicyObject, TSlice>['refetchPlaybackInfoInterval']>;
    autoUrlUpload: NonNullable<PlayerProps<TElement, TPoster, TPlaybackPolicyObject, TSlice>['autoUrlUpload']>;
    jwt: PlayerProps<TElement, TPoster, TPlaybackPolicyObject, TSlice>['jwt'];
    screenWidth: InternalPlayerProps['_screenWidth'];
    playbackInfo: PlayerProps<TElement, TPoster, TPlaybackPolicyObject, TSlice>['playbackInfo'];
    accessKey: PlayerProps<TElement, TPoster, TPlaybackPolicyObject, TSlice>['accessKey'];
    onAccessKeyRequest: PlayerProps<TElement, TPoster, TPlaybackPolicyObject, TSlice>['onAccessKeyRequest'];
    playRecording: PlayerProps<TElement, TPoster, TPlaybackPolicyObject, TSlice>['playRecording'];
    sessionToken: string;
};
export declare const useSourceMimeTyped: <TElement, TPoster, TPlaybackPolicyObject extends object, TSlice>({ src, playbackId, jwt, refetchPlaybackInfoInterval, autoUrlUpload, playbackInfo, screenWidth, accessKey, onAccessKeyRequest, playRecording, sessionToken, }: UseSourceMimeTypedProps<TElement, TPoster, TPlaybackPolicyObject, TSlice>) => {
    readonly source: (HlsSrc | VideoSrc | Base64Src | WebRTCSrc)[] | AudioSrc[] | null;
    readonly uploadStatus: CreateAssetUrlProgress | null;
    readonly accessKeyResolved: string | null | undefined;
    readonly jwtResolved: string | undefined;
};
