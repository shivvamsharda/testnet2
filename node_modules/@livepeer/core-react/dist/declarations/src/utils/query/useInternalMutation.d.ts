import { HttpError } from '@livepeer/core';
import { MutationFunction, UseMutationOptions } from '@tanstack/react-query';
export declare const useInternalMutationKeys: readonly ["cacheTime", "networkMode", "onError", "onMutate", "onSettled", "onSuccess", "retry", "retryDelay", "useErrorBoundary", "meta"];
export type UseInternalMutationOptions<TData, TVariables, TError = HttpError | Error, TContext = unknown> = (TVariables & {
    mutationConfig?: Partial<Pick<UseMutationOptions<TData, TError, TVariables, TContext>, typeof useInternalMutationKeys[number]>>;
}) | undefined | null;
export declare function useInternalMutation<TData, TVariables, TError = HttpError | Error, TContext = unknown>(options: UseInternalMutationOptions<TData, TVariables, TError, TContext> | undefined | null, mutationFn: MutationFunction<TData, TVariables>, mutationKey: UseMutationOptions<TData, TVariables, TError, TContext>['mutationKey']): {
    readonly data: TData | undefined;
    readonly error: TError | null;
    readonly isError: boolean;
    readonly isIdle: boolean;
    readonly isLoading: boolean;
    readonly isSuccess: boolean;
    readonly mutate: (() => void) | undefined;
    readonly mutateAsync: () => Promise<TData> | undefined;
    readonly variables: TVariables | undefined;
    readonly status: "error" | "loading" | "idle" | "success";
    readonly internal: {
        readonly reset: () => void;
    };
};
