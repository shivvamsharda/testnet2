import { HttpError } from '@livepeer/core';
import { QueryKey, UseQueryOptions } from '@tanstack/react-query';
import { Status } from './types';
export type InternalQueryError = HttpError | Error;
export declare const usePickQueryKeys: ReadonlyArray<keyof UseQueryOptions>;
export type UsePickQueryOptions<TQueryFnData = unknown, TData = TQueryFnData, TQueryKey extends QueryKey = QueryKey> = Pick<UseQueryOptions<TQueryFnData, InternalQueryError, TData, TQueryKey>, typeof usePickQueryKeys[number]>;
export declare function useInternalQuery<TQueryFnData = unknown, TData = TQueryFnData, TQueryKey extends QueryKey = QueryKey>(options: UseQueryOptions<TQueryFnData, InternalQueryError, TData, TQueryKey>): {
    readonly data: TData | undefined;
    readonly error: Error | HttpError<undefined> | null;
    readonly isError: boolean;
    readonly isFetched: boolean;
    readonly isFetching: boolean;
    readonly isIdle: boolean;
    readonly isLoading: boolean;
    readonly isRefetching: boolean;
    readonly isSuccess: boolean;
    readonly refetch: <TPageData>(options?: (import("@tanstack/react-query").RefetchOptions & import("@tanstack/react-query").RefetchQueryFilters<TPageData>) | undefined) => Promise<import("@tanstack/react-query").QueryObserverResult<TData, Error | HttpError<undefined>>>;
    readonly status: Status;
    readonly internal: {
        readonly fetchStatus: import("@tanstack/react-query").FetchStatus;
        readonly dataUpdatedAt: number;
        readonly errorUpdatedAt: number;
        readonly failureCount: number;
        readonly isFetchedAfterMount: boolean;
        readonly isLoadingError: boolean;
        readonly isPaused: boolean;
        readonly isPlaceholderData: boolean;
        readonly isPreviousData: boolean;
        readonly isRefetchError: boolean;
        readonly isStale: boolean;
        readonly remove: () => void;
    };
};
