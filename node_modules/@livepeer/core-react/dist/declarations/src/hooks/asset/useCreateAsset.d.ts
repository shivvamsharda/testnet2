import { Asset, CreateAssetArgs, CreateAssetProgress, CreateAssetSourceType, LivepeerProvider, MirrorSizeArray } from '@livepeer/core/types';
import { UseInternalMutationOptions } from '../../utils';
export declare function useCreateAsset<TLivepeerProvider extends LivepeerProvider, TSource extends CreateAssetSourceType>(options: UseInternalMutationOptions<MirrorSizeArray<TSource, Asset>, Omit<CreateAssetArgs<TSource>, 'onUploadProgress'>>): {
    readonly progress: CreateAssetProgress<TSource> | undefined;
    readonly data: MirrorSizeArray<TSource, Asset> | undefined;
    readonly error: Error | import("@livepeer/core").HttpError<undefined> | null;
    readonly isError: boolean;
    readonly isIdle: boolean;
    readonly isLoading: boolean;
    readonly isSuccess: boolean;
    readonly mutate: (() => void) | undefined;
    readonly mutateAsync: () => Promise<MirrorSizeArray<TSource, Asset>> | undefined;
    readonly variables: Omit<CreateAssetArgs<TSource>, "onUploadProgress"> | undefined;
    readonly status: "error" | "loading" | "idle" | "success";
    readonly internal: {
        readonly reset: () => void;
    };
};
