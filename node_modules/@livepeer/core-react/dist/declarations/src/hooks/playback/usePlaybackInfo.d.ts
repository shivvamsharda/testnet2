import { ClientConfig } from '@livepeer/core/client';
import { GetPlaybackInfoArgs, LivepeerProvider, LivepeerProviderConfig, PlaybackInfo } from '@livepeer/core/types';
import { PrefetchQueryOptions, UsePickQueryOptions } from '../../utils';
export declare const queryKey: (args: GetPlaybackInfoArgs, config: LivepeerProviderConfig) => readonly [{
    readonly entity: "getPlaybackInfo";
    readonly args: GetPlaybackInfoArgs;
    readonly config: LivepeerProviderConfig;
}];
export type UsePlaybackInfoArgs<TData> = PrefetchQueryOptions & Partial<GetPlaybackInfoArgs> & Partial<UsePickQueryOptions<PlaybackInfo, TData, ReturnType<typeof queryKey>>>;
export declare function usePlaybackInfo<TLivepeerProvider extends LivepeerProvider, TData = PlaybackInfo>(args: UsePlaybackInfoArgs<TData>): {
    readonly data: TData | undefined;
    readonly error: Error | import("@livepeer/core").HttpError<undefined> | null;
    readonly isError: boolean;
    readonly isFetched: boolean;
    readonly isFetching: boolean;
    readonly isIdle: boolean;
    readonly isLoading: boolean;
    readonly isRefetching: boolean;
    readonly isSuccess: boolean;
    readonly refetch: <TPageData>(options?: (import("@tanstack/query-core").RefetchOptions & import("@tanstack/query-core").RefetchQueryFilters<TPageData>) | undefined) => Promise<import("@tanstack/query-core").QueryObserverResult<TData, Error | import("@livepeer/core").HttpError<undefined>>>;
    readonly status: import("../../utils").Status;
    readonly internal: {
        readonly fetchStatus: import("@tanstack/query-core").FetchStatus;
        readonly dataUpdatedAt: number;
        readonly errorUpdatedAt: number;
        readonly failureCount: number;
        readonly isFetchedAfterMount: boolean;
        readonly isLoadingError: boolean;
        readonly isPaused: boolean;
        readonly isPlaceholderData: boolean;
        readonly isPreviousData: boolean;
        readonly isRefetchError: boolean;
        readonly isStale: boolean;
        readonly remove: () => void;
    };
};
export declare function prefetchPlaybackInfo<TLivepeerProvider extends LivepeerProvider, TData = PlaybackInfo>(args: UsePlaybackInfoArgs<TData>, config: Omit<ClientConfig<TLivepeerProvider>, 'storage'>): Promise<import("@tanstack/query-core").DehydratedState>;
