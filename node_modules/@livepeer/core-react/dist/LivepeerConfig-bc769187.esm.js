import { QueryClientProvider, Hydrate } from '@tanstack/react-query';
import * as React from 'react';
import { jsx } from 'react/jsx-runtime';

const Context = /*#__PURE__*/React.createContext(undefined);

// we create a custom query context so that all queries can use this and not share context with other react-query
const QueryClientContext = /*#__PURE__*/React.createContext(undefined);
function LivepeerConfig({
  children,
  client,
  dehydratedState
}) {
  return /*#__PURE__*/jsx(Context.Provider, {
    value: client,
    children: /*#__PURE__*/jsx(QueryClientProvider, {
      context: QueryClientContext,
      client: client.queryClient,
      children: /*#__PURE__*/jsx(Hydrate, {
        options: {
          context: QueryClientContext
        },
        state: dehydratedState ?? undefined,
        children: children
      })
    })
  });
}
function useClient() {
  const client = React.useContext(Context);
  if (!client) throw new Error(['`useClient` must be used within `LivepeerConfig`.'].join('\n'));
  return client;
}

export { Context as C, LivepeerConfig as L, QueryClientContext as Q, useClient as u };
