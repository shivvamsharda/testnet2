'use strict';

var reactQuery = require('@tanstack/react-query');
var React = require('react');
var jsxRuntime = require('react/jsx-runtime');

function _interopNamespace(e) {
  if (e && e.__esModule) return e;
  var n = Object.create(null);
  if (e) {
    Object.keys(e).forEach(function (k) {
      if (k !== 'default') {
        var d = Object.getOwnPropertyDescriptor(e, k);
        Object.defineProperty(n, k, d.get ? d : {
          enumerable: true,
          get: function () { return e[k]; }
        });
      }
    });
  }
  n["default"] = e;
  return Object.freeze(n);
}

var React__namespace = /*#__PURE__*/_interopNamespace(React);

const Context = /*#__PURE__*/React__namespace.createContext(undefined);

// we create a custom query context so that all queries can use this and not share context with other react-query
const QueryClientContext = /*#__PURE__*/React__namespace.createContext(undefined);
function LivepeerConfig({
  children,
  client,
  dehydratedState
}) {
  return /*#__PURE__*/jsxRuntime.jsx(Context.Provider, {
    value: client,
    children: /*#__PURE__*/jsxRuntime.jsx(reactQuery.QueryClientProvider, {
      context: QueryClientContext,
      client: client.queryClient,
      children: /*#__PURE__*/jsxRuntime.jsx(reactQuery.Hydrate, {
        options: {
          context: QueryClientContext
        },
        state: dehydratedState ?? undefined,
        children: children
      })
    })
  });
}
function useClient() {
  const client = React__namespace.useContext(Context);
  if (!client) throw new Error(['`useClient` must be used within `LivepeerConfig`.'].join('\n'));
  return client;
}

exports.Context = Context;
exports.LivepeerConfig = LivepeerConfig;
exports.QueryClientContext = QueryClientContext;
exports.useClient = useClient;
