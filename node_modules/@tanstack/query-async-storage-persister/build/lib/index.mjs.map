{"version":3,"file":"index.mjs","sources":["../../src/index.ts"],"sourcesContent":["import type {\n  PersistedClient,\n  Persister,\n  Promisable,\n} from '@tanstack/query-persist-client-core'\nimport { asyncThrottle } from './asyncThrottle'\n\ninterface AsyncStorage {\n  getItem: (key: string) => Promise<string | null>\n  setItem: (key: string, value: string) => Promise<unknown>\n  removeItem: (key: string) => Promise<void>\n}\n\nexport type AsyncPersistRetryer = (props: {\n  persistedClient: PersistedClient\n  error: Error\n  errorCount: number\n}) => Promisable<PersistedClient | undefined>\n\ninterface CreateAsyncStoragePersisterOptions {\n  /** The storage client used for setting and retrieving items from cache.\n   * For SSR pass in `undefined`. Note that window.localStorage can be\n   * `null` in Android WebViews depending on how they are configured.\n   */\n  storage: AsyncStorage | undefined | null\n  /** The key to use when storing the cache */\n  key?: string\n  /** To avoid spamming,\n   * pass a time in ms to throttle saving the cache to disk */\n  throttleTime?: number\n  /**\n   * How to serialize the data to storage.\n   * @default `JSON.stringify`\n   */\n  serialize?: (client: PersistedClient) => string\n  /**\n   * How to deserialize the data from storage.\n   * @default `JSON.parse`\n   */\n  deserialize?: (cachedString: string) => PersistedClient\n\n  retry?: AsyncPersistRetryer\n}\n\nexport const createAsyncStoragePersister = ({\n  storage,\n  key = `REACT_QUERY_OFFLINE_CACHE`,\n  throttleTime = 1000,\n  serialize = JSON.stringify,\n  deserialize = JSON.parse,\n  retry,\n}: CreateAsyncStoragePersisterOptions): Persister => {\n  if (storage) {\n    const trySave = async (\n      persistedClient: PersistedClient,\n    ): Promise<Error | undefined> => {\n      try {\n        await storage.setItem(key, serialize(persistedClient))\n        return\n      } catch (error) {\n        return error as Error\n      }\n    }\n\n    return {\n      persistClient: asyncThrottle(\n        async (persistedClient) => {\n          let client: PersistedClient | undefined = persistedClient\n          let error = await trySave(client)\n          let errorCount = 0\n          while (error && client) {\n            errorCount++\n            client = await retry?.({\n              persistedClient: client,\n              error,\n              errorCount,\n            })\n\n            if (client) {\n              error = await trySave(client)\n            }\n          }\n        },\n        { interval: throttleTime },\n      ),\n      restoreClient: async () => {\n        const cacheString = await storage.getItem(key)\n\n        if (!cacheString) {\n          return\n        }\n\n        return deserialize(cacheString) as PersistedClient\n      },\n      removeClient: () => storage.removeItem(key),\n    }\n  }\n\n  return {\n    persistClient: noop,\n    restoreClient: () => Promise.resolve(undefined),\n    removeClient: noop,\n  }\n}\n\n// eslint-disable-next-line @typescript-eslint/no-empty-function\nfunction noop() {}\n"],"names":["createAsyncStoragePersister","storage","key","throttleTime","serialize","JSON","stringify","deserialize","parse","retry","trySave","persistedClient","setItem","error","persistClient","asyncThrottle","client","errorCount","interval","restoreClient","cacheString","getItem","removeClient","removeItem","noop","Promise","resolve","undefined"],"mappings":";;AA4CO,MAAMA,2BAA2B,GAAG,CAAC;EAC1CC,OAD0C;AAE1CC,EAAAA,GAAG,GAFuC,2BAAA;AAG1CC,EAAAA,YAAY,GAAG,IAH2B;EAI1CC,SAAS,GAAGC,IAAI,CAACC,SAJyB;EAK1CC,WAAW,GAAGF,IAAI,CAACG,KALuB;AAM1CC,EAAAA,KAAAA;AAN0C,CAAD,KAOU;AACnD,EAAA,IAAIR,OAAJ,EAAa;AACX,IAAA,MAAMS,OAAO,GAAG,MACdC,eADc,IAEiB;MAC/B,IAAI;QACF,MAAMV,OAAO,CAACW,OAAR,CAAgBV,GAAhB,EAAqBE,SAAS,CAACO,eAAD,CAA9B,CAAN,CAAA;AACA,QAAA,OAAA;OAFF,CAGE,OAAOE,KAAP,EAAc;AACd,QAAA,OAAOA,KAAP,CAAA;AACD,OAAA;KARH,CAAA;;IAWA,OAAO;AACLC,MAAAA,aAAa,EAAEC,aAAa,CAC1B,MAAOJ,eAAP,IAA2B;QACzB,IAAIK,MAAmC,GAAGL,eAA1C,CAAA;AACA,QAAA,IAAIE,KAAK,GAAG,MAAMH,OAAO,CAACM,MAAD,CAAzB,CAAA;QACA,IAAIC,UAAU,GAAG,CAAjB,CAAA;;QACA,OAAOJ,KAAK,IAAIG,MAAhB,EAAwB;UACtBC,UAAU,EAAA,CAAA;AACVD,UAAAA,MAAM,GAAG,OAAMP,KAAN,IAAA,IAAA,GAAA,KAAA,CAAA,GAAMA,KAAK,CAAG;AACrBE,YAAAA,eAAe,EAAEK,MADI;YAErBH,KAFqB;AAGrBI,YAAAA,UAAAA;AAHqB,WAAH,CAAX,CAAT,CAAA;;AAMA,UAAA,IAAID,MAAJ,EAAY;AACVH,YAAAA,KAAK,GAAG,MAAMH,OAAO,CAACM,MAAD,CAArB,CAAA;AACD,WAAA;AACF,SAAA;AACF,OAjByB,EAkB1B;AAAEE,QAAAA,QAAQ,EAAEf,YAAAA;AAAZ,OAlB0B,CADvB;AAqBLgB,MAAAA,aAAa,EAAE,YAAY;QACzB,MAAMC,WAAW,GAAG,MAAMnB,OAAO,CAACoB,OAAR,CAAgBnB,GAAhB,CAA1B,CAAA;;QAEA,IAAI,CAACkB,WAAL,EAAkB;AAChB,UAAA,OAAA;AACD,SAAA;;QAED,OAAOb,WAAW,CAACa,WAAD,CAAlB,CAAA;OA5BG;AA8BLE,MAAAA,YAAY,EAAE,MAAMrB,OAAO,CAACsB,UAAR,CAAmBrB,GAAnB,CAAA;KA9BtB,CAAA;AAgCD,GAAA;;EAED,OAAO;AACLY,IAAAA,aAAa,EAAEU,IADV;AAELL,IAAAA,aAAa,EAAE,MAAMM,OAAO,CAACC,OAAR,CAAgBC,SAAhB,CAFhB;AAGLL,IAAAA,YAAY,EAAEE,IAAAA;GAHhB,CAAA;AAKD;;AAGD,SAASA,IAAT,GAAgB;;;;"}