{"version":3,"file":"index.development.js","sources":["../../src/asyncThrottle.ts","../../src/index.ts"],"sourcesContent":["export interface AsyncThrottleOptions {\n  interval?: number\n  onError?: (error: unknown) => void\n}\n\nconst noop = () => {\n  /* do nothing */\n}\n\nexport function asyncThrottle<Args extends readonly unknown[]>(\n  func: (...args: Args) => Promise<void>,\n  { interval = 1000, onError = noop }: AsyncThrottleOptions = {},\n) {\n  if (typeof func !== 'function') throw new Error('argument is not function.')\n\n  let running = false\n  let lastTime = 0\n  let timeout: ReturnType<typeof setTimeout>\n  let currentArgs: Args | null = null\n\n  const execFunc = async () => {\n    if (currentArgs) {\n      const args = currentArgs\n      currentArgs = null\n      try {\n        running = true\n        await func(...args)\n      } catch (error) {\n        onError(error)\n      } finally {\n        lastTime = Date.now() // this line must after 'func' executed to avoid two 'func' running in concurrent.\n        running = false\n      }\n    }\n  }\n\n  const delayFunc = async () => {\n    clearTimeout(timeout)\n    timeout = setTimeout(() => {\n      if (running) {\n        delayFunc() // Will come here when 'func' execution time is greater than the interval.\n      } else {\n        execFunc()\n      }\n    }, interval)\n  }\n\n  return (...args: Args) => {\n    currentArgs = args\n\n    const tooSoon = Date.now() - lastTime < interval\n    if (running || tooSoon) {\n      delayFunc()\n    } else {\n      execFunc()\n    }\n  }\n}\n","import type {\n  PersistedClient,\n  Persister,\n  Promisable,\n} from '@tanstack/query-persist-client-core'\nimport { asyncThrottle } from './asyncThrottle'\n\ninterface AsyncStorage {\n  getItem: (key: string) => Promise<string | null>\n  setItem: (key: string, value: string) => Promise<unknown>\n  removeItem: (key: string) => Promise<void>\n}\n\nexport type AsyncPersistRetryer = (props: {\n  persistedClient: PersistedClient\n  error: Error\n  errorCount: number\n}) => Promisable<PersistedClient | undefined>\n\ninterface CreateAsyncStoragePersisterOptions {\n  /** The storage client used for setting and retrieving items from cache.\n   * For SSR pass in `undefined`. Note that window.localStorage can be\n   * `null` in Android WebViews depending on how they are configured.\n   */\n  storage: AsyncStorage | undefined | null\n  /** The key to use when storing the cache */\n  key?: string\n  /** To avoid spamming,\n   * pass a time in ms to throttle saving the cache to disk */\n  throttleTime?: number\n  /**\n   * How to serialize the data to storage.\n   * @default `JSON.stringify`\n   */\n  serialize?: (client: PersistedClient) => string\n  /**\n   * How to deserialize the data from storage.\n   * @default `JSON.parse`\n   */\n  deserialize?: (cachedString: string) => PersistedClient\n\n  retry?: AsyncPersistRetryer\n}\n\nexport const createAsyncStoragePersister = ({\n  storage,\n  key = `REACT_QUERY_OFFLINE_CACHE`,\n  throttleTime = 1000,\n  serialize = JSON.stringify,\n  deserialize = JSON.parse,\n  retry,\n}: CreateAsyncStoragePersisterOptions): Persister => {\n  if (storage) {\n    const trySave = async (\n      persistedClient: PersistedClient,\n    ): Promise<Error | undefined> => {\n      try {\n        await storage.setItem(key, serialize(persistedClient))\n        return\n      } catch (error) {\n        return error as Error\n      }\n    }\n\n    return {\n      persistClient: asyncThrottle(\n        async (persistedClient) => {\n          let client: PersistedClient | undefined = persistedClient\n          let error = await trySave(client)\n          let errorCount = 0\n          while (error && client) {\n            errorCount++\n            client = await retry?.({\n              persistedClient: client,\n              error,\n              errorCount,\n            })\n\n            if (client) {\n              error = await trySave(client)\n            }\n          }\n        },\n        { interval: throttleTime },\n      ),\n      restoreClient: async () => {\n        const cacheString = await storage.getItem(key)\n\n        if (!cacheString) {\n          return\n        }\n\n        return deserialize(cacheString) as PersistedClient\n      },\n      removeClient: () => storage.removeItem(key),\n    }\n  }\n\n  return {\n    persistClient: noop,\n    restoreClient: () => Promise.resolve(undefined),\n    removeClient: noop,\n  }\n}\n\n// eslint-disable-next-line @typescript-eslint/no-empty-function\nfunction noop() {}\n"],"names":["noop","asyncThrottle","func","interval","onError","Error","running","lastTime","timeout","currentArgs","execFunc","args","error","Date","now","delayFunc","clearTimeout","setTimeout","tooSoon","createAsyncStoragePersister","storage","key","throttleTime","serialize","JSON","stringify","deserialize","parse","retry","trySave","persistedClient","setItem","persistClient","client","errorCount","restoreClient","cacheString","getItem","removeClient","removeItem","Promise","resolve","undefined"],"mappings":"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"}